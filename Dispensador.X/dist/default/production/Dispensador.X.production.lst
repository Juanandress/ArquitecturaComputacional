

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Dec 14 22:41:58 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    38  0000                     
    39                           ; Version 2.20
    40                           ; Generated 12/02/2020 GMT
    41                           ; 
    42                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4550 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     _PORTDbits	set	3971
    74  0000                     _PORTAbits	set	3968
    75  0000                     _PORTEbits	set	3972
    76  0000                     _ADCON2bits	set	4032
    77  0000                     _ADCON0bits	set	4034
    78  0000                     _ADCON1bits	set	4033
    79  0000                     _OSCCONbits	set	4051
    80  0000                     _TRISAbits	set	3986
    81  0000                     _PORTBbits	set	3969
    82  0000                     _TRISB	set	3987
    83  0000                     _TRISDbits	set	3989
    84                           
    85                           	psect	smallconst
    86  000800                     __psmallconst:
    87                           	callstack 0
    88  000800  00                 	db	0
    89  000801                     STR_4:
    90  000801  31                 	db	49	;'1'
    91  000802  35                 	db	53	;'5'
    92  000803  2F                 	db	47
    93  000804  31                 	db	49	;'1'
    94  000805  32                 	db	50	;'2'
    95  000806  2F                 	db	47
    96  000807  32                 	db	50	;'2'
    97  000808  30                 	db	48	;'0'
    98  000809  32                 	db	50	;'2'
    99  00080A  30                 	db	48	;'0'
   100  00080B  00                 	db	0
   101  00080C                     STR_1:
   102  00080C  23                 	db	35
   103  00080D  50                 	db	80	;'P'
   104  00080E  65                 	db	101	;'e'
   105  00080F  72                 	db	114	;'r'
   106  000810  3A                 	db	58	;':'
   107  000811  00                 	db	0
   108  000812                     STR_3:
   109  000812  4E                 	db	78	;'N'
   110  000813  69                 	db	105	;'i'
   111  000814  76                 	db	118	;'v'
   112  000815  3A                 	db	58	;':'
   113  000816  00                 	db	0
   114  000817                     STR_2:
   115  000817  25                 	db	37
   116  000818  64                 	db	100	;'d'
   117  000819  00                 	db	0
   118  00081A  00                 	db	0	; dummy byte at the end
   119  0000                     
   120                           ; #config settings
   121                           
   122                           	psect	cinit
   123  00167E                     __pcinit:
   124                           	callstack 0
   125  00167E                     start_initialization:
   126                           	callstack 0
   127  00167E                     __initialization:
   128                           	callstack 0
   129                           
   130                           ; Clear objects allocated to BANK0 (40 bytes)
   131  00167E  EE00  F060         	lfsr	0,__pbssBANK0
   132  001682  0E28               	movlw	40
   133  001684                     clear_0:
   134  001684  6AEE               	clrf	postinc0,c
   135  001686  06E8               	decf	wreg,f,c
   136  001688  E1FD               	bnz	clear_0
   137  00168A                     end_of_initialization:
   138                           	callstack 0
   139  00168A                     __end_of__initialization:
   140                           	callstack 0
   141  00168A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   142  00168C  6EF8               	movwf	tblptru,c
   143  00168E  0100               	movlb	0
   144  001690  EF97  F008         	goto	_main	;jump to C main() function
   145                           
   146                           	psect	bssBANK0
   147  000060                     __pbssBANK0:
   148                           	callstack 0
   149  000060                     _nout:
   150                           	callstack 0
   151  000060                     	ds	2
   152  000062                     _width:
   153                           	callstack 0
   154  000062                     	ds	2
   155  000064                     _prec:
   156                           	callstack 0
   157  000064                     	ds	2
   158  000066                     _flags:
   159                           	callstack 0
   160  000066                     	ds	2
   161  000068                     _dbuf:
   162                           	callstack 0
   163  000068                     	ds	32
   164                           
   165                           	psect	cstackBANK0
   166  000088                     __pcstackBANK0:
   167                           	callstack 0
   168  000088                     	ds	2
   169  00008A                     sprintf@ap:
   170                           	callstack 0
   171                           
   172                           ; 2 bytes @ 0x2
   173  00008A                     	ds	2
   174  00008C                     sprintf@f:
   175                           	callstack 0
   176                           
   177                           ; 6 bytes @ 0x4
   178  00008C                     	ds	6
   179  000092                     Estado_Sis@aux:
   180                           	callstack 0
   181                           
   182                           ; 5 bytes @ 0xA
   183  000092                     	ds	5
   184  000097                     main@count:
   185                           	callstack 0
   186                           
   187                           ; 2 bytes @ 0xF
   188  000097                     	ds	2
   189                           
   190                           	psect	cstackCOMRAM
   191  000001                     __pcstackCOMRAM:
   192                           	callstack 0
   193  000001                     ??_Alarma_ON:
   194  000001                     ?_Dips_Alcohol:
   195                           	callstack 0
   196  000001                     ?_strlen:
   197                           	callstack 0
   198  000001                     ?___aodiv:
   199                           	callstack 0
   200  000001                     ?___aomod:
   201                           	callstack 0
   202  000001                     Lcd_Port@a:
   203                           	callstack 0
   204  000001                     Dips_Alcohol@count:
   205                           	callstack 0
   206  000001                     fputc@c:
   207                           	callstack 0
   208  000001                     strlen@s:
   209                           	callstack 0
   210  000001                     ___aodiv@dividend:
   211                           	callstack 0
   212  000001                     ___aomod@dividend:
   213                           	callstack 0
   214                           
   215                           ; 8 bytes @ 0x0
   216  000001                     	ds	1
   217  000002                     ??_Lcd_Cmd:
   218  000002                     Lcd_Write_Char@temp:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0x1
   222  000002                     	ds	1
   223  000003                     ?_Leer_S_Magnetic:
   224                           	callstack 0
   225  000003                     Lcd_Cmd@a:
   226                           	callstack 0
   227  000003                     Lcd_Write_Char@y:
   228                           	callstack 0
   229  000003                     Leer_S_Magnetic@count:
   230                           	callstack 0
   231  000003                     fputc@fp:
   232                           	callstack 0
   233  000003                     strlen@a:
   234                           	callstack 0
   235                           
   236                           ; 2 bytes @ 0x2
   237  000003                     	ds	1
   238  000004                     ??_Lcd_Init:
   239  000004                     Lcd_Set_Cursor@b:
   240                           	callstack 0
   241  000004                     Lcd_Write_Char@a:
   242                           	callstack 0
   243                           
   244                           ; 1 bytes @ 0x3
   245  000004                     	ds	1
   246  000005                     ??_fputc:
   247  000005                     ?_Leer_Pir:
   248                           	callstack 0
   249  000005                     Lcd_Set_Cursor@a:
   250                           	callstack 0
   251  000005                     Leer_Pir@count:
   252                           	callstack 0
   253  000005                     Lcd_Write_String@a:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0x4
   257  000005                     	ds	1
   258  000006                     Lcd_Set_Cursor@z:
   259                           	callstack 0
   260                           
   261                           ; 1 bytes @ 0x5
   262  000006                     	ds	1
   263  000007                     ??_Leer_Pir:
   264  000007                     ??_Lcd_Write_String:
   265  000007                     Lcd_Set_Cursor@y:
   266                           	callstack 0
   267                           
   268                           ; 1 bytes @ 0x6
   269  000007                     	ds	1
   270  000008                     Lcd_Set_Cursor@temp:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0x7
   274  000008                     	ds	1
   275  000009                     Lcd_Write_String@i:
   276                           	callstack 0
   277  000009                     ___aodiv@divisor:
   278                           	callstack 0
   279  000009                     ___aomod@divisor:
   280                           	callstack 0
   281                           
   282                           ; 8 bytes @ 0x8
   283  000009                     	ds	1
   284  00000A                     fputs@s:
   285                           	callstack 0
   286                           
   287                           ; 2 bytes @ 0x9
   288  00000A                     	ds	2
   289  00000C                     fputs@fp:
   290                           	callstack 0
   291                           
   292                           ; 2 bytes @ 0xB
   293  00000C                     	ds	2
   294  00000E                     fputs@c:
   295                           	callstack 0
   296                           
   297                           ; 1 bytes @ 0xD
   298  00000E                     	ds	1
   299  00000F                     fputs@i:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0xE
   303  00000F                     	ds	2
   304  000011                     ?_pad:
   305                           	callstack 0
   306  000011                     ___aodiv@counter:
   307                           	callstack 0
   308  000011                     ___aomod@counter:
   309                           	callstack 0
   310  000011                     pad@fp:
   311                           	callstack 0
   312                           
   313                           ; 2 bytes @ 0x10
   314  000011                     	ds	1
   315  000012                     ___aodiv@sign:
   316                           	callstack 0
   317  000012                     ___aomod@sign:
   318                           	callstack 0
   319                           
   320                           ; 1 bytes @ 0x11
   321  000012                     	ds	1
   322  000013                     ?_abs:
   323                           	callstack 0
   324  000013                     pad@buf:
   325                           	callstack 0
   326  000013                     abs@a:
   327                           	callstack 0
   328  000013                     ___aodiv@quotient:
   329                           	callstack 0
   330                           
   331                           ; 8 bytes @ 0x12
   332  000013                     	ds	2
   333  000015                     ??_abs:
   334  000015                     pad@p:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0x14
   338  000015                     	ds	2
   339  000017                     ??_pad:
   340                           
   341                           ; 1 bytes @ 0x16
   342  000017                     	ds	1
   343  000018                     pad@i:
   344                           	callstack 0
   345                           
   346                           ; 2 bytes @ 0x17
   347  000018                     	ds	2
   348  00001A                     pad@w:
   349                           	callstack 0
   350                           
   351                           ; 2 bytes @ 0x19
   352  00001A                     	ds	2
   353  00001C                     ?_dtoa:
   354                           	callstack 0
   355  00001C                     dtoa@fp:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0x1B
   359  00001C                     	ds	2
   360  00001E                     dtoa@d:
   361                           	callstack 0
   362                           
   363                           ; 8 bytes @ 0x1D
   364  00001E                     	ds	8
   365  000026                     ??_dtoa:
   366                           
   367                           ; 1 bytes @ 0x25
   368  000026                     	ds	8
   369  00002E                     _dtoa$1145:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x2D
   373  00002E                     	ds	2
   374  000030                     dtoa@p:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x2F
   378  000030                     	ds	2
   379  000032                     dtoa@w:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x31
   383  000032                     	ds	2
   384  000034                     dtoa@s:
   385                           	callstack 0
   386                           
   387                           ; 2 bytes @ 0x33
   388  000034                     	ds	2
   389  000036                     dtoa@n:
   390                           	callstack 0
   391                           
   392                           ; 8 bytes @ 0x35
   393  000036                     	ds	8
   394  00003E                     dtoa@i:
   395                           	callstack 0
   396                           
   397                           ; 2 bytes @ 0x3D
   398  00003E                     	ds	2
   399  000040                     ?_vfpfcnvrt:
   400                           	callstack 0
   401  000040                     vfpfcnvrt@fp:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x3F
   405  000040                     	ds	2
   406  000042                     vfpfcnvrt@fmt:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x41
   410  000042                     	ds	2
   411  000044                     vfpfcnvrt@ap:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x43
   415  000044                     	ds	2
   416  000046                     ??_vfpfcnvrt:
   417                           
   418                           ; 1 bytes @ 0x45
   419  000046                     	ds	2
   420  000048                     vfpfcnvrt@ll:
   421                           	callstack 0
   422                           
   423                           ; 8 bytes @ 0x47
   424  000048                     	ds	8
   425  000050                     ?_vfprintf:
   426                           	callstack 0
   427  000050                     vfprintf@fp:
   428                           	callstack 0
   429                           
   430                           ; 2 bytes @ 0x4F
   431  000050                     	ds	2
   432  000052                     vfprintf@fmt:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x51
   436  000052                     	ds	2
   437  000054                     vfprintf@ap:
   438                           	callstack 0
   439                           
   440                           ; 2 bytes @ 0x53
   441  000054                     	ds	2
   442  000056                     vfprintf@cfmt:
   443                           	callstack 0
   444                           
   445                           ; 2 bytes @ 0x55
   446  000056                     	ds	2
   447  000058                     ?_sprintf:
   448                           	callstack 0
   449  000058                     sprintf@s:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x57
   453  000058                     	ds	2
   454  00005A                     sprintf@fmt:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x59
   458  00005A                     	ds	4
   459  00005E                     Estado_Sis@count:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x5D
   463  00005E                     	ds	2
   464  000060                     
   465                           ; 1 bytes @ 0x5F
   466 ;;
   467 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   468 ;;
   469 ;; *************** function _main *****************
   470 ;; Defined at:
   471 ;;		line 46 in file "Dispensador.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;		None
   474 ;; Auto vars:     Size  Location     Type
   475 ;;  count           2   15[BANK0 ] int 
   476 ;; Return value:  Size  Location     Type
   477 ;;                  2   46[None  ] int 
   478 ;; Registers used:
   479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   485 ;;      Params:         0       0       0       0       0       0       0       0       0
   486 ;;      Locals:         0       2       0       0       0       0       0       0       0
   487 ;;      Temps:          0       0       0       0       0       0       0       0       0
   488 ;;      Totals:         0       2       0       0       0       0       0       0       0
   489 ;;Total ram usage:        2 bytes
   490 ;; Hardware stack levels required when called:    9
   491 ;; This function calls:
   492 ;;		_Estado_Sis
   493 ;;		_Leer_Pir
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           	psect	text0
   500  00112E                     __ptext0:
   501                           	callstack 0
   502  00112E                     _main:
   503                           	callstack 22
   504  00112E                     
   505                           ;Dispensador.c: 51:     int count=0;
   506  00112E  0E00               	movlw	0
   507  001130  0100               	movlb	0	; () banked
   508  001132  6F98               	movwf	(main@count+1)& (0+255),b
   509  001134  0E00               	movlw	0
   510  001136  6F97               	movwf	main@count& (0+255),b
   511  001138                     
   512                           ; BSR set to: 0
   513                           ;Dispensador.c: 54:     TRISDbits.TRISD0 = 0;
   514  001138  9095               	bcf	149,0,c	;volatile
   515  00113A                     
   516                           ; BSR set to: 0
   517                           ;Dispensador.c: 55:     TRISDbits.TRISD1 = 0;
   518  00113A  9295               	bcf	149,1,c	;volatile
   519  00113C                     
   520                           ; BSR set to: 0
   521                           ;Dispensador.c: 56:     TRISDbits.TRISD2 = 0;
   522  00113C  9495               	bcf	149,2,c	;volatile
   523  00113E                     
   524                           ; BSR set to: 0
   525                           ;Dispensador.c: 57:     TRISDbits.TRISD7 = 0;
   526  00113E  9E95               	bcf	149,7,c	;volatile
   527  001140                     
   528                           ; BSR set to: 0
   529                           ;Dispensador.c: 58:     TRISDbits.TRISD6= 0;
   530  001140  9C95               	bcf	149,6,c	;volatile
   531                           
   532                           ;Dispensador.c: 59:     TRISB=0;
   533  001142  0E00               	movlw	0
   534  001144  6E93               	movwf	147,c	;volatile
   535  001146                     
   536                           ; BSR set to: 0
   537                           ;Dispensador.c: 60:     PORTBbits.RB1=0;
   538  001146  9281               	bcf	129,1,c	;volatile
   539  001148                     
   540                           ; BSR set to: 0
   541                           ;Dispensador.c: 62:     TRISAbits.TRISA4=1;
   542  001148  8892               	bsf	146,4,c	;volatile
   543  00114A                     
   544                           ; BSR set to: 0
   545                           ;Dispensador.c: 63:     TRISAbits.TRISA3=1;
   546  00114A  8692               	bsf	146,3,c	;volatile
   547                           
   548                           ;Dispensador.c: 66:     OSCCONbits.IRCF = 0b111;
   549  00114C  0E70               	movlw	112
   550  00114E  12D3               	iorwf	211,f,c	;volatile
   551                           
   552                           ;Dispensador.c: 67:     OSCCONbits.SCS = 0b10;
   553  001150  50D3               	movf	211,w,c	;volatile
   554  001152  0BFC               	andlw	-4
   555  001154  0902               	iorlw	2
   556  001156  6ED3               	movwf	211,c	;volatile
   557                           
   558                           ;Dispensador.c: 68:     ADCON1bits.PCFG = 0b1110;
   559  001158  50C1               	movf	193,w,c	;volatile
   560  00115A  0BF0               	andlw	-16
   561  00115C  090E               	iorlw	14
   562  00115E  6EC1               	movwf	193,c	;volatile
   563                           
   564                           ;Dispensador.c: 69:     ADCON1bits.VCFG = 0b00;
   565  001160  0ECF               	movlw	-49
   566  001162  16C1               	andwf	193,f,c	;volatile
   567                           
   568                           ;Dispensador.c: 70:     ADCON0bits.CHS = 0b0000;
   569  001164  0EC3               	movlw	-61
   570  001166  16C2               	andwf	194,f,c	;volatile
   571                           
   572                           ;Dispensador.c: 71:     ADCON2bits.ACQT = 0b010;
   573  001168  50C0               	movf	192,w,c	;volatile
   574  00116A  0BC7               	andlw	-57
   575  00116C  0910               	iorlw	16
   576  00116E  6EC0               	movwf	192,c	;volatile
   577                           
   578                           ;Dispensador.c: 72:     ADCON2bits.ADCS = 0b001;
   579  001170  50C0               	movf	192,w,c	;volatile
   580  001172  0BF8               	andlw	-8
   581  001174  0901               	iorlw	1
   582  001176  6EC0               	movwf	192,c	;volatile
   583  001178                     
   584                           ; BSR set to: 0
   585                           ;Dispensador.c: 73:     ADCON2bits.ADFM = 0;
   586  001178  9EC0               	bcf	192,7,c	;volatile
   587  00117A                     
   588                           ; BSR set to: 0
   589                           ;Dispensador.c: 74:     ADCON0bits.ADON = 1;
   590  00117A  80C2               	bsf	194,0,c	;volatile
   591                           
   592                           ;Dispensador.c: 77:     while(PORTEbits.RE3==1){
   593  00117C  EFD0  F008         	goto	l1786
   594  001180                     l1782:
   595                           
   596                           ;Dispensador.c: 78:     count=Leer_Pir(count);
   597  001180  C097  F005         	movff	main@count,Leer_Pir@count
   598  001184  C098  F006         	movff	main@count+1,Leer_Pir@count+1
   599  001188  EC48  F00A         	call	_Leer_Pir	;wreg free
   600  00118C  C005  F097         	movff	?_Leer_Pir,main@count
   601  001190  C006  F098         	movff	?_Leer_Pir+1,main@count+1
   602  001194                     
   603                           ;Dispensador.c: 79:     Estado_Sis(count);
   604  001194  C097  F05E         	movff	main@count,Estado_Sis@count
   605  001198  C098  F05F         	movff	main@count+1,Estado_Sis@count+1
   606  00119C  EC18  F009         	call	_Estado_Sis	;wreg free
   607  0011A0                     l1786:
   608                           
   609                           ;Dispensador.c: 77:     while(PORTEbits.RE3==1){
   610  0011A0  B684               	btfsc	132,3,c	;volatile
   611  0011A2  EFD5  F008         	goto	u1141
   612  0011A6  EFD7  F008         	goto	u1140
   613  0011AA                     u1141:
   614  0011AA  EFC0  F008         	goto	l1782
   615  0011AE                     u1140:
   616  0011AE  EF00  F000         	goto	start
   617  0011B2                     __end_of_main:
   618                           	callstack 0
   619                           
   620 ;; *************** function _Leer_Pir *****************
   621 ;; Defined at:
   622 ;;		line 99 in file "Dispensador.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  count           2    4[COMRAM] int 
   625 ;; Auto vars:     Size  Location     Type
   626 ;;		None
   627 ;; Return value:  Size  Location     Type
   628 ;;                  2    4[COMRAM] unsigned int 
   629 ;; Registers used:
   630 ;;		wreg, status,2, status,0, cstack
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 0/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   636 ;;      Params:         2       0       0       0       0       0       0       0       0
   637 ;;      Locals:         0       0       0       0       0       0       0       0       0
   638 ;;      Temps:          2       0       0       0       0       0       0       0       0
   639 ;;      Totals:         4       0       0       0       0       0       0       0       0
   640 ;;Total ram usage:        4 bytes
   641 ;; Hardware stack levels used:    1
   642 ;; Hardware stack levels required when called:    2
   643 ;; This function calls:
   644 ;;		_Leer_S_Magnetic
   645 ;; This function is called by:
   646 ;;		_main
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           	psect	text1
   651  001490                     __ptext1:
   652                           	callstack 0
   653  001490                     _Leer_Pir:
   654                           	callstack 28
   655  001490                     
   656                           ;Dispensador.c: 104:     if(PORTAbits.RA4==1)
   657  001490  A880               	btfss	128,4,c	;volatile
   658  001492  EF4D  F00A         	goto	u1131
   659  001496  EF4F  F00A         	goto	u1130
   660  00149A                     u1131:
   661  00149A  EF69  F00A         	goto	l53
   662  00149E                     u1130:
   663  00149E                     
   664                           ;Dispensador.c: 105:     {;Dispensador.c: 106:         PORTBbits.RB1=1;
   665  00149E  8281               	bsf	129,1,c	;volatile
   666                           
   667                           ;Dispensador.c: 107:         PORTDbits.RD0=0;
   668  0014A0  9083               	bcf	131,0,c	;volatile
   669                           
   670                           ;Dispensador.c: 108:         PORTDbits.RD1=1;
   671  0014A2  8283               	bsf	131,1,c	;volatile
   672  0014A4                     
   673                           ;Dispensador.c: 110:         _delay((unsigned long)((500)*(8000000/4000.0)));
   674  0014A4  0E06               	movlw	6
   675  0014A6  6E08               	movwf	(??_Leer_Pir+1)^0,c
   676  0014A8  0E13               	movlw	19
   677  0014AA  6E07               	movwf	??_Leer_Pir^0,c
   678  0014AC  0EAE               	movlw	174
   679  0014AE                     u1157:
   680  0014AE  2EE8               	decfsz	wreg,f,c
   681  0014B0  D7FE               	bra	u1157
   682  0014B2  2E07               	decfsz	??_Leer_Pir^0,f,c
   683  0014B4  D7FC               	bra	u1157
   684  0014B6  2E08               	decfsz	(??_Leer_Pir+1)^0,f,c
   685  0014B8  D7FA               	bra	u1157
   686  0014BA                     
   687                           ;Dispensador.c: 111:         count=Leer_S_Magnetic(count);
   688  0014BA  C005  F003         	movff	Leer_Pir@count,Leer_S_Magnetic@count
   689  0014BE  C006  F004         	movff	Leer_Pir@count+1,Leer_S_Magnetic@count+1
   690  0014C2  ECB2  F00A         	call	_Leer_S_Magnetic	;wreg free
   691  0014C6  C003  F005         	movff	?_Leer_S_Magnetic,Leer_Pir@count
   692  0014CA  C004  F006         	movff	?_Leer_S_Magnetic+1,Leer_Pir@count+1
   693                           
   694                           ;Dispensador.c: 112:     }
   695  0014CE  EF6B  F00A         	goto	l54
   696  0014D2                     l53:
   697                           
   698                           ;Dispensador.c: 114:           PORTDbits.RD0=0;
   699  0014D2  9083               	bcf	131,0,c	;volatile
   700                           
   701                           ;Dispensador.c: 115:           PORTDbits.RD1=0;
   702  0014D4  9283               	bcf	131,1,c	;volatile
   703  0014D6                     l54:
   704                           
   705                           ;Dispensador.c: 117:    return(count);
   706  0014D6  C005  F005         	movff	Leer_Pir@count,?_Leer_Pir
   707  0014DA  C006  F006         	movff	Leer_Pir@count+1,?_Leer_Pir+1
   708  0014DE  0012               	return		;funcret
   709  0014E0                     __end_of_Leer_Pir:
   710                           	callstack 0
   711                           
   712 ;; *************** function _Leer_S_Magnetic *****************
   713 ;; Defined at:
   714 ;;		line 136 in file "Dispensador.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;  count           2    2[COMRAM] int 
   717 ;; Auto vars:     Size  Location     Type
   718 ;;		None
   719 ;; Return value:  Size  Location     Type
   720 ;;                  2    2[COMRAM] unsigned int 
   721 ;; Registers used:
   722 ;;		wreg, status,2, status,0, cstack
   723 ;; Tracked objects:
   724 ;;		On entry : 0/0
   725 ;;		On exit  : 0/0
   726 ;;		Unchanged: 0/0
   727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   728 ;;      Params:         2       0       0       0       0       0       0       0       0
   729 ;;      Locals:         0       0       0       0       0       0       0       0       0
   730 ;;      Temps:          0       0       0       0       0       0       0       0       0
   731 ;;      Totals:         2       0       0       0       0       0       0       0       0
   732 ;;Total ram usage:        2 bytes
   733 ;; Hardware stack levels used:    1
   734 ;; Hardware stack levels required when called:    1
   735 ;; This function calls:
   736 ;;		_Alarma_ON
   737 ;;		_Dips_Alcohol
   738 ;; This function is called by:
   739 ;;		_Leer_Pir
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           	psect	text2
   744  001564                     __ptext2:
   745                           	callstack 0
   746  001564                     _Leer_S_Magnetic:
   747                           	callstack 28
   748  001564                     
   749                           ;Dispensador.c: 141:     if(PORTAbits.RA3==1){
   750  001564  A680               	btfss	128,3,c	;volatile
   751  001566  EFB7  F00A         	goto	u1071
   752  00156A  EFB9  F00A         	goto	u1070
   753  00156E                     u1071:
   754  00156E  EFC5  F00A         	goto	l58
   755  001572                     u1070:
   756  001572                     
   757                           ;Dispensador.c: 142:         count=Dips_Alcohol(count);
   758  001572  C003  F001         	movff	Leer_S_Magnetic@count,Dips_Alcohol@count
   759  001576  C004  F002         	movff	Leer_S_Magnetic@count+1,Dips_Alcohol@count+1
   760  00157A  EC05  F00B         	call	_Dips_Alcohol	;wreg free
   761  00157E  C001  F003         	movff	?_Dips_Alcohol,Leer_S_Magnetic@count
   762  001582  C002  F004         	movff	?_Dips_Alcohol+1,Leer_S_Magnetic@count+1
   763                           
   764                           ;Dispensador.c: 143:     }
   765  001586  EFC9  F00A         	goto	l1664
   766  00158A                     l58:
   767                           
   768                           ;Dispensador.c: 145:         PORTBbits.RB1=0;
   769  00158A  9281               	bcf	129,1,c	;volatile
   770                           
   771                           ;Dispensador.c: 146:         PORTDbits.RD0=1;
   772  00158C  8083               	bsf	131,0,c	;volatile
   773  00158E                     
   774                           ;Dispensador.c: 147:         Alarma_ON();
   775  00158E  EC1F  F00B         	call	_Alarma_ON	;wreg free
   776  001592                     l1664:
   777                           
   778                           ;Dispensador.c: 149:     return(count);
   779  001592  C003  F003         	movff	Leer_S_Magnetic@count,?_Leer_S_Magnetic
   780  001596  C004  F004         	movff	Leer_S_Magnetic@count+1,?_Leer_S_Magnetic+1
   781  00159A  0012               	return		;funcret
   782  00159C                     __end_of_Leer_S_Magnetic:
   783                           	callstack 0
   784                           
   785 ;; *************** function _Dips_Alcohol *****************
   786 ;; Defined at:
   787 ;;		line 168 in file "Dispensador.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  count           2    0[COMRAM] int 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;		None
   792 ;; Return value:  Size  Location     Type
   793 ;;                  2    0[COMRAM] unsigned int 
   794 ;; Registers used:
   795 ;;		wreg, status,2, status,0
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   801 ;;      Params:         2       0       0       0       0       0       0       0       0
   802 ;;      Locals:         0       0       0       0       0       0       0       0       0
   803 ;;      Temps:          0       0       0       0       0       0       0       0       0
   804 ;;      Totals:         2       0       0       0       0       0       0       0       0
   805 ;;Total ram usage:        2 bytes
   806 ;; Hardware stack levels used:    1
   807 ;; This function calls:
   808 ;;		Nothing
   809 ;; This function is called by:
   810 ;;		_Leer_S_Magnetic
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           	psect	text3
   815  00160A                     __ptext3:
   816                           	callstack 0
   817  00160A                     _Dips_Alcohol:
   818                           	callstack 28
   819  00160A                     
   820                           ;Dispensador.c: 174:     while(PORTAbits.RA3==1){
   821  00160A  EF0A  F00B         	goto	l63
   822  00160E                     l64:
   823                           
   824                           ;Dispensador.c: 175:      PORTDbits.RD1=0;
   825  00160E  9283               	bcf	131,1,c	;volatile
   826                           
   827                           ;Dispensador.c: 176:      PORTDbits.RD2=1;
   828  001610  8483               	bsf	131,2,c	;volatile
   829                           
   830                           ;Dispensador.c: 177:      PORTDbits.RD6=1;
   831  001612  8C83               	bsf	131,6,c	;volatile
   832  001614                     l63:
   833                           
   834                           ;Dispensador.c: 174:     while(PORTAbits.RA3==1){
   835  001614  B680               	btfsc	128,3,c	;volatile
   836  001616  EF0F  F00B         	goto	u1051
   837  00161A  EF11  F00B         	goto	u1050
   838  00161E                     u1051:
   839  00161E  EF07  F00B         	goto	l64
   840  001622                     u1050:
   841  001622                     
   842                           ;Dispensador.c: 179:     PORTDbits.RD6=0;
   843  001622  9C83               	bcf	131,6,c	;volatile
   844                           
   845                           ;Dispensador.c: 180:     PORTDbits.RD2=0;
   846  001624  9483               	bcf	131,2,c	;volatile
   847  001626                     
   848                           ;Dispensador.c: 181:     count=count+1;
   849  001626  0E01               	movlw	1
   850  001628  2401               	addwf	Dips_Alcohol@count^0,w,c
   851  00162A  6E01               	movwf	Dips_Alcohol@count^0,c
   852  00162C  0E00               	movlw	0
   853  00162E  2002               	addwfc	(Dips_Alcohol@count+1)^0,w,c
   854  001630  6E02               	movwf	(Dips_Alcohol@count+1)^0,c
   855  001632                     
   856                           ;Dispensador.c: 182:     PORTBbits.RB1=0;
   857  001632  9281               	bcf	129,1,c	;volatile
   858  001634                     
   859                           ;Dispensador.c: 183:     return(count);
   860  001634  C001  F001         	movff	Dips_Alcohol@count,?_Dips_Alcohol
   861  001638  C002  F002         	movff	Dips_Alcohol@count+1,?_Dips_Alcohol+1
   862  00163C  0012               	return		;funcret
   863  00163E                     __end_of_Dips_Alcohol:
   864                           	callstack 0
   865                           
   866 ;; *************** function _Alarma_ON *****************
   867 ;; Defined at:
   868 ;;		line 201 in file "Dispensador.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;		None
   871 ;; Auto vars:     Size  Location     Type
   872 ;;		None
   873 ;; Return value:  Size  Location     Type
   874 ;;                  1    wreg      void 
   875 ;; Registers used:
   876 ;;		wreg
   877 ;; Tracked objects:
   878 ;;		On entry : 0/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   882 ;;      Params:         0       0       0       0       0       0       0       0       0
   883 ;;      Locals:         0       0       0       0       0       0       0       0       0
   884 ;;      Temps:          2       0       0       0       0       0       0       0       0
   885 ;;      Totals:         2       0       0       0       0       0       0       0       0
   886 ;;Total ram usage:        2 bytes
   887 ;; Hardware stack levels used:    1
   888 ;; This function calls:
   889 ;;		Nothing
   890 ;; This function is called by:
   891 ;;		_Leer_S_Magnetic
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text4
   896  00163E                     __ptext4:
   897                           	callstack 0
   898  00163E                     _Alarma_ON:
   899                           	callstack 28
   900  00163E                     
   901                           ;Dispensador.c: 206:     PORTDbits.RD7=1;
   902  00163E  8E83               	bsf	131,7,c	;volatile
   903                           
   904                           ;Dispensador.c: 207:     PORTDbits.RD1=1;
   905  001640  8283               	bsf	131,1,c	;volatile
   906  001642                     
   907                           ;Dispensador.c: 208:     _delay((unsigned long)((500)*(8000000/4000.0)));
   908  001642  0E06               	movlw	6
   909  001644  6E02               	movwf	(??_Alarma_ON+1)^0,c
   910  001646  0E13               	movlw	19
   911  001648  6E01               	movwf	??_Alarma_ON^0,c
   912  00164A  0EAE               	movlw	174
   913  00164C                     u1167:
   914  00164C  2EE8               	decfsz	wreg,f,c
   915  00164E  D7FE               	bra	u1167
   916  001650  2E01               	decfsz	??_Alarma_ON^0,f,c
   917  001652  D7FC               	bra	u1167
   918  001654  2E02               	decfsz	(??_Alarma_ON+1)^0,f,c
   919  001656  D7FA               	bra	u1167
   920  001658                     
   921                           ;Dispensador.c: 209:      PORTDbits.RD7=0;
   922  001658  9E83               	bcf	131,7,c	;volatile
   923  00165A                     
   924                           ;Dispensador.c: 210:      PORTDbits.RD1=0;
   925  00165A  9283               	bcf	131,1,c	;volatile
   926  00165C  0012               	return		;funcret
   927  00165E                     __end_of_Alarma_ON:
   928                           	callstack 0
   929                           
   930 ;; *************** function _Estado_Sis *****************
   931 ;; Defined at:
   932 ;;		line 228 in file "Dispensador.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;  count           2   93[COMRAM] int 
   935 ;; Auto vars:     Size  Location     Type
   936 ;;  aux             5   10[BANK0 ] unsigned char [5]
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      void 
   939 ;; Registers used:
   940 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   946 ;;      Params:         2       0       0       0       0       0       0       0       0
   947 ;;      Locals:         0       5       0       0       0       0       0       0       0
   948 ;;      Temps:          0       0       0       0       0       0       0       0       0
   949 ;;      Totals:         2       5       0       0       0       0       0       0       0
   950 ;;Total ram usage:        7 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; Hardware stack levels required when called:    8
   953 ;; This function calls:
   954 ;;		_Lcd_Init
   955 ;;		_Lcd_Set_Cursor
   956 ;;		_Lcd_Write_String
   957 ;;		_sprintf
   958 ;; This function is called by:
   959 ;;		_main
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           	psect	text5
   964  001230                     __ptext5:
   965                           	callstack 0
   966  001230                     _Estado_Sis:
   967                           	callstack 22
   968  001230                     
   969                           ;Dispensador.c: 233:     char aux[5];;Dispensador.c: 234:     Lcd_Init();
   970  001230  EC55  F009         	call	_Lcd_Init	;wreg free
   971  001234                     
   972                           ;Dispensador.c: 235:     Lcd_Set_Cursor(1,1);
   973  001234  0E01               	movlw	1
   974  001236  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   975  001238  0E01               	movlw	1
   976  00123A  EC8D  F009         	call	_Lcd_Set_Cursor
   977  00123E                     
   978                           ;Dispensador.c: 236:     Lcd_Write_String("#Per:");
   979  00123E  0E0C               	movlw	low STR_1
   980  001240  6E05               	movwf	Lcd_Write_String@a^0,c
   981  001242  0E08               	movlw	high STR_1
   982  001244  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
   983  001246  ECD9  F008         	call	_Lcd_Write_String	;wreg free
   984  00124A                     
   985                           ;Dispensador.c: 237:     Lcd_Set_Cursor(1,6);
   986  00124A  0E06               	movlw	6
   987  00124C  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   988  00124E  0E01               	movlw	1
   989  001250  EC8D  F009         	call	_Lcd_Set_Cursor
   990  001254                     
   991                           ;Dispensador.c: 238:     sprintf(aux,"%d",count);
   992  001254  0E92               	movlw	low Estado_Sis@aux
   993  001256  6E58               	movwf	sprintf@s^0,c
   994  001258  0E00               	movlw	high Estado_Sis@aux
   995  00125A  6E59               	movwf	(sprintf@s+1)^0,c
   996  00125C  0E17               	movlw	low STR_2
   997  00125E  6E5A               	movwf	sprintf@fmt^0,c
   998  001260  0E08               	movlw	high STR_2
   999  001262  6E5B               	movwf	(sprintf@fmt+1)^0,c
  1000  001264  C05E  F05C         	movff	Estado_Sis@count,?_sprintf+4
  1001  001268  C05F  F05D         	movff	Estado_Sis@count+1,?_sprintf+5
  1002  00126C  EC1F  F00A         	call	_sprintf	;wreg free
  1003  001270                     
  1004                           ;Dispensador.c: 239:     Lcd_Write_String(aux);
  1005  001270  0E92               	movlw	low Estado_Sis@aux
  1006  001272  6E05               	movwf	Lcd_Write_String@a^0,c
  1007  001274  0E00               	movlw	high Estado_Sis@aux
  1008  001276  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1009  001278  ECD9  F008         	call	_Lcd_Write_String	;wreg free
  1010  00127C                     
  1011                           ;Dispensador.c: 240:     Lcd_Set_Cursor(1,10);
  1012  00127C  0E0A               	movlw	10
  1013  00127E  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1014  001280  0E01               	movlw	1
  1015  001282  EC8D  F009         	call	_Lcd_Set_Cursor
  1016  001286                     
  1017                           ;Dispensador.c: 241:     Lcd_Write_String("Niv:");
  1018  001286  0E12               	movlw	low STR_3
  1019  001288  6E05               	movwf	Lcd_Write_String@a^0,c
  1020  00128A  0E08               	movlw	high STR_3
  1021  00128C  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1022  00128E  ECD9  F008         	call	_Lcd_Write_String	;wreg free
  1023  001292                     
  1024                           ;Dispensador.c: 242:     Lcd_Set_Cursor(2,1);
  1025  001292  0E01               	movlw	1
  1026  001294  6E04               	movwf	Lcd_Set_Cursor@b^0,c
  1027  001296  0E02               	movlw	2
  1028  001298  EC8D  F009         	call	_Lcd_Set_Cursor
  1029  00129C                     
  1030                           ;Dispensador.c: 243:     Lcd_Write_String("15/12/2020");
  1031  00129C  0E01               	movlw	low STR_4
  1032  00129E  6E05               	movwf	Lcd_Write_String@a^0,c
  1033  0012A0  0E08               	movlw	high STR_4
  1034  0012A2  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
  1035  0012A4  ECD9  F008         	call	_Lcd_Write_String	;wreg free
  1036  0012A8  0012               	return		;funcret
  1037  0012AA                     __end_of_Estado_Sis:
  1038                           	callstack 0
  1039                           
  1040 ;; *************** function _sprintf *****************
  1041 ;; Defined at:
  1042 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_sprintf.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;  s               2   87[COMRAM] PTR unsigned char 
  1045 ;;		 -> Estado_Sis@aux(5), 
  1046 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
  1047 ;;		 -> STR_2(3), 
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;  f               6    4[BANK0 ] struct _IO_FILE
  1050 ;;  ap              2    2[BANK0 ] PTR void [1]
  1051 ;;		 -> ?_sprintf(2), 
  1052 ;;  ret             2    0        int 
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  2   87[COMRAM] int 
  1055 ;; Registers used:
  1056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1062 ;;      Params:         6       0       0       0       0       0       0       0       0
  1063 ;;      Locals:         0      10       0       0       0       0       0       0       0
  1064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1065 ;;      Totals:         6      10       0       0       0       0       0       0       0
  1066 ;;Total ram usage:       16 bytes
  1067 ;; Hardware stack levels used:    1
  1068 ;; Hardware stack levels required when called:    7
  1069 ;; This function calls:
  1070 ;;		_vfprintf
  1071 ;; This function is called by:
  1072 ;;		_Estado_Sis
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           	psect	text6
  1077  00143E                     __ptext6:
  1078                           	callstack 0
  1079  00143E                     _sprintf:
  1080                           	callstack 22
  1081  00143E  0E5C               	movlw	low (?_sprintf+4)
  1082  001440  0100               	movlb	0	; () banked
  1083  001442  6F8A               	movwf	sprintf@ap& (0+255),b
  1084  001444  0E00               	movlw	high (?_sprintf+4)
  1085  001446  6F8B               	movwf	(sprintf@ap+1)& (0+255),b
  1086  001448  C058  F08C         	movff	sprintf@s,sprintf@f
  1087  00144C  C059  F08D         	movff	sprintf@s+1,sprintf@f+1
  1088  001450                     
  1089                           ; BSR set to: 0
  1090  001450  0E00               	movlw	0
  1091  001452  6F8F               	movwf	(sprintf@f+3)& (0+255),b
  1092  001454  0E00               	movlw	0
  1093  001456  6F8E               	movwf	(sprintf@f+2)& (0+255),b
  1094  001458                     
  1095                           ; BSR set to: 0
  1096  001458  0E00               	movlw	0
  1097  00145A  6F91               	movwf	(sprintf@f+5)& (0+255),b
  1098  00145C  0E00               	movlw	0
  1099  00145E  6F90               	movwf	(sprintf@f+4)& (0+255),b
  1100  001460                     
  1101                           ; BSR set to: 0
  1102  001460  0E8C               	movlw	low sprintf@f
  1103  001462  6E50               	movwf	vfprintf@fp^0,c
  1104  001464  0E00               	movlw	high sprintf@f
  1105  001466  6E51               	movwf	(vfprintf@fp+1)^0,c
  1106  001468  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
  1107  00146C  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1108  001470  0E8A               	movlw	low sprintf@ap
  1109  001472  6E54               	movwf	vfprintf@ap^0,c
  1110  001474  0E00               	movlw	high sprintf@ap
  1111  001476  6E55               	movwf	(vfprintf@ap+1)^0,c
  1112  001478  ECC0  F009         	call	_vfprintf	;wreg free
  1113  00147C  0100               	movlb	0	; () banked
  1114  00147E  518E               	movf	(sprintf@f+2)& (0+255),w,b
  1115  001480  2458               	addwf	sprintf@s^0,w,c
  1116  001482  6ED9               	movwf	fsr2l,c
  1117  001484  518F               	movf	(sprintf@f+3)& (0+255),w,b
  1118  001486  2059               	addwfc	(sprintf@s+1)^0,w,c
  1119  001488  6EDA               	movwf	fsr2h,c
  1120  00148A  0E00               	movlw	0
  1121  00148C  6EDF               	movwf	indf2,c
  1122  00148E                     
  1123                           ; BSR set to: 0
  1124  00148E  0012               	return		;funcret
  1125  001490                     __end_of_sprintf:
  1126                           	callstack 0
  1127                           
  1128 ;; *************** function _vfprintf *****************
  1129 ;; Defined at:
  1130 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
  1133 ;;		 -> sprintf@f(6), 
  1134 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
  1135 ;;		 -> STR_2(3), 
  1136 ;;  ap              2   83[COMRAM] PTR PTR void 
  1137 ;;		 -> sprintf@ap(2), 
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
  1140 ;;		 -> STR_2(3), 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  2   79[COMRAM] int 
  1143 ;; Registers used:
  1144 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1150 ;;      Params:         6       0       0       0       0       0       0       0       0
  1151 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1153 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1154 ;;Total ram usage:        8 bytes
  1155 ;; Hardware stack levels used:    1
  1156 ;; Hardware stack levels required when called:    6
  1157 ;; This function calls:
  1158 ;;		_vfpfcnvrt
  1159 ;; This function is called by:
  1160 ;;		_sprintf
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text7
  1165  001380                     __ptext7:
  1166                           	callstack 0
  1167  001380                     _vfprintf:
  1168                           	callstack 22
  1169  001380                     
  1170                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  1171  001380  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
  1172  001384  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1173  001388                     
  1174                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  1175  001388  0E00               	movlw	0
  1176  00138A  0100               	movlb	0	; () banked
  1177  00138C  6F61               	movwf	(_nout+1)& (0+255),b
  1178  00138E  0E00               	movlw	0
  1179  001390  6F60               	movwf	_nout& (0+255),b
  1180                           
  1181                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  1182  001392  EFDE  F009         	goto	l1656
  1183  001396                     l1654:
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  1187  001396  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  1188  00139A  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1189  00139E  0E56               	movlw	low vfprintf@cfmt
  1190  0013A0  6E42               	movwf	vfpfcnvrt@fmt^0,c
  1191  0013A2  0E00               	movlw	high vfprintf@cfmt
  1192  0013A4  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1193  0013A6  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  1194  0013AA  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1195  0013AE  EC7F  F005         	call	_vfpfcnvrt	;wreg free
  1196  0013B2  5040               	movf	?_vfpfcnvrt^0,w,c
  1197  0013B4  0100               	movlb	0	; () banked
  1198  0013B6  2760               	addwf	_nout& (0+255),f,b
  1199  0013B8  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
  1200  0013BA  2361               	addwfc	(_nout+1)& (0+255),f,b
  1201  0013BC                     l1656:
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  1205  0013BC  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
  1206  0013C0  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1207  0013C4                     	if	0	;tblptru may be non-zero
  1208  0013C4                     	endif
  1209  0013C4                     	if	0	;tblptru may be non-zero
  1210  0013C4                     	endif
  1211  0013C4  0008               	tblrd		*
  1212  0013C6  50F5               	movf	tablat,w,c
  1213  0013C8  0900               	iorlw	0
  1214  0013CA  A4D8               	btfss	status,2,c
  1215  0013CC  EFEA  F009         	goto	u1061
  1216  0013D0  EFEC  F009         	goto	u1060
  1217  0013D4                     u1061:
  1218  0013D4  EFCB  F009         	goto	l1654
  1219  0013D8                     u1060:
  1220  0013D8                     
  1221                           ; BSR set to: 0
  1222                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  1223  0013D8  C060  F050         	movff	_nout,?_vfprintf
  1224  0013DC  C061  F051         	movff	_nout+1,?_vfprintf+1
  1225  0013E0                     
  1226                           ; BSR set to: 0
  1227  0013E0  0012               	return		;funcret
  1228  0013E2                     __end_of_vfprintf:
  1229                           	callstack 0
  1230                           
  1231 ;; *************** function _vfpfcnvrt *****************
  1232 ;; Defined at:
  1233 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  1236 ;;		 -> sprintf@f(6), 
  1237 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  1238 ;;		 -> vfprintf@cfmt(2), 
  1239 ;;  ap              2   67[COMRAM] PTR PTR void 
  1240 ;;		 -> sprintf@ap(2), 
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  ll              8   71[COMRAM] long long 
  1243 ;;  llu             8    0        unsigned long long 
  1244 ;;  f               4    0        unsigned long long 
  1245 ;;  vp              3    0        PTR void 
  1246 ;;  ct              3    0        unsigned char [3]
  1247 ;;  cp              3    0        PTR unsigned char 
  1248 ;;  i               2    0        int 
  1249 ;;  done            2    0        int 
  1250 ;;  c               1    0        unsigned char 
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  2   63[COMRAM] int 
  1253 ;; Registers used:
  1254 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1260 ;;      Params:         6       0       0       0       0       0       0       0       0
  1261 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1262 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1263 ;;      Totals:        16       0       0       0       0       0       0       0       0
  1264 ;;Total ram usage:       16 bytes
  1265 ;; Hardware stack levels used:    1
  1266 ;; Hardware stack levels required when called:    5
  1267 ;; This function calls:
  1268 ;;		_dtoa
  1269 ;;		_fputc
  1270 ;; This function is called by:
  1271 ;;		_vfprintf
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text8
  1276  000AFE                     __ptext8:
  1277                           	callstack 0
  1278  000AFE                     _vfpfcnvrt:
  1279                           	callstack 22
  1280  000AFE                     
  1281                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.31\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.31\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          1\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  1282  000AFE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1283  000B02  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1284  000B06  CFDE FFF6          	movff	postinc2,tblptrl
  1285  000B0A  CFDD FFF7          	movff	postdec2,tblptrh
  1286  000B0E                     	if	0	;tblptru may be non-zero
  1287  000B0E                     	endif
  1288  000B0E                     	if	0	;tblptru may be non-zero
  1289  000B0E                     	endif
  1290  000B0E  0008               	tblrd		*
  1291  000B10  50F5               	movf	tablat,w,c
  1292  000B12  0A25               	xorlw	37
  1293  000B14  A4D8               	btfss	status,2,c
  1294  000B16  EF8F  F005         	goto	u1011
  1295  000B1A  EF91  F005         	goto	u1010
  1296  000B1E                     u1011:
  1297  000B1E  EF3D  F006         	goto	l1594
  1298  000B22                     u1010:
  1299  000B22                     
  1300                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  1301  000B22  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1302  000B26  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1303  000B2A  2ADE               	incf	postinc2,f,c
  1304  000B2C  0E00               	movlw	0
  1305  000B2E  22DD               	addwfc	postdec2,f,c
  1306  000B30                     
  1307                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  1308  000B30  0E00               	movlw	0
  1309  000B32  0100               	movlb	0	; () banked
  1310  000B34  6F63               	movwf	(_width+1)& (0+255),b
  1311  000B36  0E00               	movlw	0
  1312  000B38  6F62               	movwf	_width& (0+255),b
  1313  000B3A  C062  F066         	movff	_width,_flags
  1314  000B3E  C063  F067         	movff	_width+1,_flags+1
  1315  000B42                     
  1316                           ; BSR set to: 0
  1317                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  1318  000B42  6964               	setf	_prec& (0+255),b
  1319  000B44  6965               	setf	(_prec+1)& (0+255),b
  1320  000B46                     
  1321                           ; BSR set to: 0
  1322                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1323  000B46  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1324  000B4A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1325  000B4E  CFDE FFF6          	movff	postinc2,tblptrl
  1326  000B52  CFDD FFF7          	movff	postdec2,tblptrh
  1327  000B56                     	if	0	;tblptru may be non-zero
  1328  000B56                     	endif
  1329  000B56                     	if	0	;tblptru may be non-zero
  1330  000B56                     	endif
  1331  000B56  0008               	tblrd		*
  1332  000B58  50F5               	movf	tablat,w,c
  1333  000B5A  0A64               	xorlw	100
  1334  000B5C  B4D8               	btfsc	status,2,c
  1335  000B5E  EFB3  F005         	goto	u1021
  1336  000B62  EFB5  F005         	goto	u1020
  1337  000B66                     u1021:
  1338  000B66  EFC7  F005         	goto	l1572
  1339  000B6A                     u1020:
  1340  000B6A                     
  1341                           ; BSR set to: 0
  1342  000B6A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1343  000B6E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1344  000B72  CFDE FFF6          	movff	postinc2,tblptrl
  1345  000B76  CFDD FFF7          	movff	postdec2,tblptrh
  1346  000B7A                     	if	0	;tblptru may be non-zero
  1347  000B7A                     	endif
  1348  000B7A                     	if	0	;tblptru may be non-zero
  1349  000B7A                     	endif
  1350  000B7A  0008               	tblrd		*
  1351  000B7C  50F5               	movf	tablat,w,c
  1352  000B7E  0A69               	xorlw	105
  1353  000B80  A4D8               	btfss	status,2,c
  1354  000B82  EFC5  F005         	goto	u1031
  1355  000B86  EFC7  F005         	goto	u1030
  1356  000B8A                     u1031:
  1357  000B8A  EF07  F006         	goto	l1578
  1358  000B8E                     u1030:
  1359  000B8E                     l1572:
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  1363  000B8E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1364  000B92  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1365  000B96  2ADE               	incf	postinc2,f,c
  1366  000B98  0E00               	movlw	0
  1367  000B9A  22DD               	addwfc	postdec2,f,c
  1368                           
  1369                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1370  000B9C  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1371  000BA0  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1372  000BA4  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1373  000BA8  0E02               	movlw	2
  1374  000BAA  26DE               	addwf	postinc2,f,c
  1375  000BAC  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1376  000BB0  0E00               	movlw	0
  1377  000BB2  22DD               	addwfc	postdec2,f,c
  1378  000BB4  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1379  000BB8  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1380  000BBC  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  1381  000BC0  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  1382  000BC4  0E00               	movlw	0
  1383  000BC6  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1384  000BC8  0EFF               	movlw	-1
  1385  000BCA  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  1386  000BCC  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  1387  000BCE  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  1388  000BD0  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  1389  000BD2  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  1390  000BD4  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  1391  000BD6                     
  1392                           ; BSR set to: 0
  1393                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1394  000BD6  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1395  000BDA  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1396  000BDE  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1397  000BE2  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1398  000BE6  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1399  000BEA  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1400  000BEE  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1401  000BF2  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1402  000BF6  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1403  000BFA  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1404  000BFE  EC0E  F004         	call	_dtoa	;wreg free
  1405  000C02  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1406  000C06  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1407  000C0A  EF58  F006         	goto	l853
  1408  000C0E                     l1578:
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1412  000C0E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1413  000C12  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1414  000C16  CFDE FFF6          	movff	postinc2,tblptrl
  1415  000C1A  CFDD FFF7          	movff	postdec2,tblptrh
  1416  000C1E                     	if	0	;tblptru may be non-zero
  1417  000C1E                     	endif
  1418  000C1E                     	if	0	;tblptru may be non-zero
  1419  000C1E                     	endif
  1420  000C1E  0008               	tblrd		*
  1421  000C20  50F5               	movf	tablat,w,c
  1422  000C22  0A25               	xorlw	37
  1423  000C24  A4D8               	btfss	status,2,c
  1424  000C26  EF17  F006         	goto	u1041
  1425  000C2A  EF19  F006         	goto	u1040
  1426  000C2E                     u1041:
  1427  000C2E  EF30  F006         	goto	l1588
  1428  000C32                     u1040:
  1429  000C32                     
  1430                           ; BSR set to: 0
  1431                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1432  000C32  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1433  000C36  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1434  000C3A  2ADE               	incf	postinc2,f,c
  1435  000C3C  0E00               	movlw	0
  1436  000C3E  22DD               	addwfc	postdec2,f,c
  1437  000C40                     
  1438                           ; BSR set to: 0
  1439                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1440  000C40  0E00               	movlw	0
  1441  000C42  6E02               	movwf	(fputc@c+1)^0,c
  1442  000C44  0E25               	movlw	37
  1443  000C46  6E01               	movwf	fputc@c^0,c
  1444  000C48  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1445  000C4C  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1446  000C50  ECCF  F007         	call	_fputc	;wreg free
  1447  000C54                     l1584:
  1448                           
  1449                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1450  000C54  0E00               	movlw	0
  1451  000C56  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1452  000C58  0E01               	movlw	1
  1453  000C5A  6E40               	movwf	?_vfpfcnvrt^0,c
  1454  000C5C  EF58  F006         	goto	l853
  1455  000C60                     l1588:
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1459  000C60  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1460  000C64  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1461  000C68  2ADE               	incf	postinc2,f,c
  1462  000C6A  0E00               	movlw	0
  1463  000C6C  22DD               	addwfc	postdec2,f,c
  1464  000C6E                     
  1465                           ; BSR set to: 0
  1466                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1467  000C6E  0E00               	movlw	0
  1468  000C70  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1469  000C72  0E00               	movlw	0
  1470  000C74  6E40               	movwf	?_vfpfcnvrt^0,c
  1471  000C76  EF58  F006         	goto	l853
  1472  000C7A                     l1594:
  1473                           
  1474                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1475  000C7A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1476  000C7E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1477  000C82  CFDE FFF6          	movff	postinc2,tblptrl
  1478  000C86  CFDD FFF7          	movff	postdec2,tblptrh
  1479  000C8A                     	if	0	;tblptru may be non-zero
  1480  000C8A                     	endif
  1481  000C8A                     	if	0	;tblptru may be non-zero
  1482  000C8A                     	endif
  1483  000C8A  0008               	tblrd		*
  1484  000C8C  50F5               	movf	tablat,w,c
  1485  000C8E  6E01               	movwf	fputc@c^0,c
  1486  000C90  6A02               	clrf	(fputc@c+1)^0,c
  1487  000C92  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1488  000C96  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1489  000C9A  ECCF  F007         	call	_fputc	;wreg free
  1490  000C9E                     
  1491                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1492  000C9E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1493  000CA2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1494  000CA6  2ADE               	incf	postinc2,f,c
  1495  000CA8  0E00               	movlw	0
  1496  000CAA  22DD               	addwfc	postdec2,f,c
  1497  000CAC  EF2A  F006         	goto	l1584
  1498  000CB0                     l853:
  1499  000CB0  0012               	return		;funcret
  1500  000CB2                     __end_of_vfpfcnvrt:
  1501                           	callstack 0
  1502                           
  1503 ;; *************** function _dtoa *****************
  1504 ;; Defined at:
  1505 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1508 ;;		 -> sprintf@f(6), 
  1509 ;;  d               8   29[COMRAM] long long 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;  n               8   53[COMRAM] long long 
  1512 ;;  i               2   61[COMRAM] int 
  1513 ;;  s               2   51[COMRAM] int 
  1514 ;;  w               2   49[COMRAM] int 
  1515 ;;  p               2   47[COMRAM] int 
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  2   27[COMRAM] int 
  1518 ;; Registers used:
  1519 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1525 ;;      Params:        10       0       0       0       0       0       0       0       0
  1526 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1527 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1528 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1529 ;;Total ram usage:       36 bytes
  1530 ;; Hardware stack levels used:    1
  1531 ;; Hardware stack levels required when called:    4
  1532 ;; This function calls:
  1533 ;;		___aodiv
  1534 ;;		___aomod
  1535 ;;		_abs
  1536 ;;		_pad
  1537 ;; This function is called by:
  1538 ;;		_vfpfcnvrt
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text9
  1543  00081C                     __ptext9:
  1544                           	callstack 0
  1545  00081C                     _dtoa:
  1546                           	callstack 22
  1547  00081C                     
  1548                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1549  00081C  C01E  F036         	movff	dtoa@d,dtoa@n
  1550  000820  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1551  000824  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1552  000828  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1553  00082C  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1554  000830  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1555  000834  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1556  000838  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1557  00083C                     
  1558                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1559  00083C  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1560  00083E  EF23  F004         	goto	u821
  1561  000842  EF26  F004         	goto	u820
  1562  000846                     u821:
  1563  000846  0E01               	movlw	1
  1564  000848  EF27  F004         	goto	u830
  1565  00084C                     u820:
  1566  00084C  0E00               	movlw	0
  1567  00084E                     u830:
  1568  00084E  6E34               	movwf	dtoa@s^0,c
  1569  000850  6A35               	clrf	(dtoa@s+1)^0,c
  1570                           
  1571                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1572  000852  5034               	movf	dtoa@s^0,w,c
  1573  000854  1035               	iorwf	(dtoa@s+1)^0,w,c
  1574  000856  B4D8               	btfsc	status,2,c
  1575  000858  EF30  F004         	goto	u841
  1576  00085C  EF32  F004         	goto	u840
  1577  000860                     u841:
  1578  000860  EF42  F004         	goto	l1488
  1579  000864                     u840:
  1580  000864                     
  1581                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1582  000864  1E3D               	comf	(dtoa@n+7)^0,f,c
  1583  000866  1E3C               	comf	(dtoa@n+6)^0,f,c
  1584  000868  1E3B               	comf	(dtoa@n+5)^0,f,c
  1585  00086A  1E3A               	comf	(dtoa@n+4)^0,f,c
  1586  00086C  1E39               	comf	(dtoa@n+3)^0,f,c
  1587  00086E  1E38               	comf	(dtoa@n+2)^0,f,c
  1588  000870  1E37               	comf	(dtoa@n+1)^0,f,c
  1589  000872  6C36               	negf	dtoa@n^0,c
  1590  000874  0E00               	movlw	0
  1591  000876  2237               	addwfc	(dtoa@n+1)^0,f,c
  1592  000878  2238               	addwfc	(dtoa@n+2)^0,f,c
  1593  00087A  2239               	addwfc	(dtoa@n+3)^0,f,c
  1594  00087C  223A               	addwfc	(dtoa@n+4)^0,f,c
  1595  00087E  223B               	addwfc	(dtoa@n+5)^0,f,c
  1596  000880  223C               	addwfc	(dtoa@n+6)^0,f,c
  1597  000882  223D               	addwfc	(dtoa@n+7)^0,f,c
  1598  000884                     l1488:
  1599                           
  1600                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1601  000884  0100               	movlb	0	; () banked
  1602  000886  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1603  000888  EF48  F004         	goto	u851
  1604  00088C  EF4A  F004         	goto	u850
  1605  000890                     u851:
  1606  000890  EF4B  F004         	goto	l1492
  1607  000894                     u850:
  1608  000894                     
  1609                           ; BSR set to: 0
  1610                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1611  000894  9366               	bcf	_flags& (0+255),1,b
  1612  000896                     l1492:
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1616  000896  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1617  000898  EF58  F004         	goto	u860
  1618  00089C  5165               	movf	(_prec+1)& (0+255),w,b
  1619  00089E  E106               	bnz	u861
  1620  0008A0  0564               	decf	_prec& (0+255),w,b
  1621  0008A2  B0D8               	btfsc	status,0,c
  1622  0008A4  EF56  F004         	goto	u861
  1623  0008A8  EF58  F004         	goto	u860
  1624  0008AC                     u861:
  1625  0008AC  EF5E  F004         	goto	l826
  1626  0008B0                     u860:
  1627  0008B0                     
  1628                           ; BSR set to: 0
  1629  0008B0  0E00               	movlw	0
  1630  0008B2  6E31               	movwf	(dtoa@p+1)^0,c
  1631  0008B4  0E01               	movlw	1
  1632  0008B6  6E30               	movwf	dtoa@p^0,c
  1633  0008B8  EF62  F004         	goto	l828
  1634  0008BC                     l826:
  1635                           
  1636                           ; BSR set to: 0
  1637  0008BC  C064  F030         	movff	_prec,dtoa@p
  1638  0008C0  C065  F031         	movff	_prec+1,dtoa@p+1
  1639  0008C4                     l828:
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1643  0008C4  C062  F032         	movff	_width,dtoa@w
  1644  0008C8  C063  F033         	movff	_width+1,dtoa@w+1
  1645  0008CC                     
  1646                           ; BSR set to: 0
  1647                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1648  0008CC  5034               	movf	dtoa@s^0,w,c
  1649  0008CE  1035               	iorwf	(dtoa@s+1)^0,w,c
  1650  0008D0  A4D8               	btfss	status,2,c
  1651  0008D2  EF6D  F004         	goto	u871
  1652  0008D6  EF6F  F004         	goto	u870
  1653  0008DA                     u871:
  1654  0008DA  EF76  F004         	goto	l1500
  1655  0008DE                     u870:
  1656  0008DE                     
  1657                           ; BSR set to: 0
  1658  0008DE  A566               	btfss	_flags& (0+255),2,b
  1659  0008E0  EF74  F004         	goto	u881
  1660  0008E4  EF76  F004         	goto	u880
  1661  0008E8                     u881:
  1662  0008E8  EF79  F004         	goto	l1502
  1663  0008EC                     u880:
  1664  0008EC                     l1500:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 306:         --w;
  1668  0008EC  0632               	decf	dtoa@w^0,f,c
  1669  0008EE  A0D8               	btfss	status,0,c
  1670  0008F0  0633               	decf	(dtoa@w+1)^0,f,c
  1671  0008F2                     l1502:
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1675  0008F2  0E00               	movlw	0
  1676  0008F4  6E3F               	movwf	(dtoa@i+1)^0,c
  1677  0008F6  0E1F               	movlw	31
  1678  0008F8  6E3E               	movwf	dtoa@i^0,c
  1679  0008FA                     
  1680                           ; BSR set to: 0
  1681                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1682  0008FA  0E00               	movlw	0
  1683  0008FC  6F87               	movwf	(_dbuf+31)& (0+255),b
  1684                           
  1685                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1686  0008FE  EFFD  F004         	goto	l1516
  1687  000902                     l1506:
  1688                           
  1689                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 313:         --i;
  1690  000902  063E               	decf	dtoa@i^0,f,c
  1691  000904  A0D8               	btfss	status,0,c
  1692  000906  063F               	decf	(dtoa@i+1)^0,f,c
  1693  000908                     
  1694                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1695  000908  0E68               	movlw	low _dbuf
  1696  00090A  243E               	addwf	dtoa@i^0,w,c
  1697  00090C  6ED9               	movwf	fsr2l,c
  1698  00090E  0E00               	movlw	high _dbuf
  1699  000910  203F               	addwfc	(dtoa@i+1)^0,w,c
  1700  000912  6EDA               	movwf	fsr2h,c
  1701  000914  C036  F001         	movff	dtoa@n,___aomod@dividend
  1702  000918  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1703  00091C  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1704  000920  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1705  000924  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1706  000928  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1707  00092C  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1708  000930  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1709  000934  0E0A               	movlw	10
  1710  000936  6E09               	movwf	___aomod@divisor^0,c
  1711  000938  0E00               	movlw	0
  1712  00093A  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1713  00093C  0E00               	movlw	0
  1714  00093E  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1715  000940  0E00               	movlw	0
  1716  000942  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1717  000944  0E00               	movlw	0
  1718  000946  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1719  000948  0E00               	movlw	0
  1720  00094A  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1721  00094C  0E00               	movlw	0
  1722  00094E  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1723  000950  0E00               	movlw	0
  1724  000952  6E10               	movwf	(___aomod@divisor+7)^0,c
  1725  000954  EC1D  F007         	call	___aomod	;wreg free
  1726  000958  C001  F026         	movff	?___aomod,??_dtoa
  1727  00095C  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1728  000960  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1729  000964  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1730  000968  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1731  00096C  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1732  000970  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1733  000974  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1734  000978  C026  F013         	movff	??_dtoa,abs@a
  1735  00097C  C028  F014         	movff	??_dtoa+2,abs@a+1
  1736  000980  EC92  F00A         	call	_abs	;wreg free
  1737  000984  5013               	movf	?_abs^0,w,c
  1738  000986  0F30               	addlw	48
  1739  000988  6EDF               	movwf	indf2,c
  1740  00098A                     
  1741                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 315:         --p;
  1742  00098A  0630               	decf	dtoa@p^0,f,c
  1743  00098C  A0D8               	btfss	status,0,c
  1744  00098E  0631               	decf	(dtoa@p+1)^0,f,c
  1745  000990                     
  1746                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 316:         --w;
  1747  000990  0632               	decf	dtoa@w^0,f,c
  1748  000992  A0D8               	btfss	status,0,c
  1749  000994  0633               	decf	(dtoa@w+1)^0,f,c
  1750  000996                     
  1751                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1752  000996  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1753  00099A  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1754  00099E  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1755  0009A2  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1756  0009A6  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1757  0009AA  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1758  0009AE  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1759  0009B2  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1760  0009B6  0E0A               	movlw	10
  1761  0009B8  6E09               	movwf	___aodiv@divisor^0,c
  1762  0009BA  0E00               	movlw	0
  1763  0009BC  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1764  0009BE  0E00               	movlw	0
  1765  0009C0  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1766  0009C2  0E00               	movlw	0
  1767  0009C4  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1768  0009C6  0E00               	movlw	0
  1769  0009C8  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1770  0009CA  0E00               	movlw	0
  1771  0009CC  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1772  0009CE  0E00               	movlw	0
  1773  0009D0  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1774  0009D2  0E00               	movlw	0
  1775  0009D4  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1776  0009D6  EC59  F006         	call	___aodiv	;wreg free
  1777  0009DA  C001  F036         	movff	?___aodiv,dtoa@n
  1778  0009DE  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1779  0009E2  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1780  0009E6  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1781  0009EA  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1782  0009EE  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1783  0009F2  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1784  0009F6  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1785  0009FA                     l1516:
  1786                           
  1787                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1788  0009FA  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1789  0009FC  EF08  F005         	goto	u891
  1790  000A00  503F               	movf	(dtoa@i+1)^0,w,c
  1791  000A02  E108               	bnz	u890
  1792  000A04  043E               	decf	dtoa@i^0,w,c
  1793  000A06  A0D8               	btfss	status,0,c
  1794  000A08  EF08  F005         	goto	u891
  1795  000A0C  EF0A  F005         	goto	u890
  1796  000A10                     u891:
  1797  000A10  EF3B  F005         	goto	l1526
  1798  000A14                     u890:
  1799  000A14  5036               	movf	dtoa@n^0,w,c
  1800  000A16  1037               	iorwf	(dtoa@n+1)^0,w,c
  1801  000A18  1038               	iorwf	(dtoa@n+2)^0,w,c
  1802  000A1A  1039               	iorwf	(dtoa@n+3)^0,w,c
  1803  000A1C  103A               	iorwf	(dtoa@n+4)^0,w,c
  1804  000A1E  103B               	iorwf	(dtoa@n+5)^0,w,c
  1805  000A20  103C               	iorwf	(dtoa@n+6)^0,w,c
  1806  000A22  103D               	iorwf	(dtoa@n+7)^0,w,c
  1807  000A24  A4D8               	btfss	status,2,c
  1808  000A26  EF17  F005         	goto	u901
  1809  000A2A  EF19  F005         	goto	u900
  1810  000A2E                     u901:
  1811  000A2E  EF81  F004         	goto	l1506
  1812  000A32                     u900:
  1813  000A32  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1814  000A34  EF26  F005         	goto	u910
  1815  000A38  5031               	movf	(dtoa@p+1)^0,w,c
  1816  000A3A  E106               	bnz	u911
  1817  000A3C  0430               	decf	dtoa@p^0,w,c
  1818  000A3E  B0D8               	btfsc	status,0,c
  1819  000A40  EF24  F005         	goto	u911
  1820  000A44  EF26  F005         	goto	u910
  1821  000A48                     u911:
  1822  000A48  EF81  F004         	goto	l1506
  1823  000A4C                     u910:
  1824  000A4C  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1825  000A4E  EF31  F005         	goto	u921
  1826  000A52  5033               	movf	(dtoa@w+1)^0,w,c
  1827  000A54  E108               	bnz	u920
  1828  000A56  0432               	decf	dtoa@w^0,w,c
  1829  000A58  A0D8               	btfss	status,0,c
  1830  000A5A  EF31  F005         	goto	u921
  1831  000A5E  EF33  F005         	goto	u920
  1832  000A62                     u921:
  1833  000A62  EF3B  F005         	goto	l1526
  1834  000A66                     u920:
  1835  000A66  0100               	movlb	0	; () banked
  1836  000A68  B366               	btfsc	_flags& (0+255),1,b
  1837  000A6A  EF39  F005         	goto	u931
  1838  000A6E  EF3B  F005         	goto	u930
  1839  000A72                     u931:
  1840  000A72  EF81  F004         	goto	l1506
  1841  000A76                     u930:
  1842  000A76                     l1526:
  1843                           
  1844                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1845  000A76  5034               	movf	dtoa@s^0,w,c
  1846  000A78  1035               	iorwf	(dtoa@s+1)^0,w,c
  1847  000A7A  A4D8               	btfss	status,2,c
  1848  000A7C  EF42  F005         	goto	u941
  1849  000A80  EF44  F005         	goto	u940
  1850  000A84                     u941:
  1851  000A84  EF4C  F005         	goto	l1530
  1852  000A88                     u940:
  1853  000A88  0100               	movlb	0	; () banked
  1854  000A8A  A566               	btfss	_flags& (0+255),2,b
  1855  000A8C  EF4A  F005         	goto	u951
  1856  000A90  EF4C  F005         	goto	u950
  1857  000A94                     u951:
  1858  000A94  EF6A  F005         	goto	l1540
  1859  000A98                     u950:
  1860  000A98                     l1530:
  1861                           
  1862                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 322:         --i;
  1863  000A98  063E               	decf	dtoa@i^0,f,c
  1864  000A9A  A0D8               	btfss	status,0,c
  1865  000A9C  063F               	decf	(dtoa@i+1)^0,f,c
  1866  000A9E                     
  1867                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1868  000A9E  5034               	movf	dtoa@s^0,w,c
  1869  000AA0  1035               	iorwf	(dtoa@s+1)^0,w,c
  1870  000AA2  A4D8               	btfss	status,2,c
  1871  000AA4  EF56  F005         	goto	u961
  1872  000AA8  EF58  F005         	goto	u960
  1873  000AAC                     u961:
  1874  000AAC  EF5E  F005         	goto	l1536
  1875  000AB0                     u960:
  1876  000AB0  0E00               	movlw	0
  1877  000AB2  6E2F               	movwf	(_dtoa$1145+1)^0,c
  1878  000AB4  0E2B               	movlw	43
  1879  000AB6  6E2E               	movwf	_dtoa$1145^0,c
  1880  000AB8  EF62  F005         	goto	l1538
  1881  000ABC                     l1536:
  1882  000ABC  0E00               	movlw	0
  1883  000ABE  6E2F               	movwf	(_dtoa$1145+1)^0,c
  1884  000AC0  0E2D               	movlw	45
  1885  000AC2  6E2E               	movwf	_dtoa$1145^0,c
  1886  000AC4                     l1538:
  1887  000AC4  0E68               	movlw	low _dbuf
  1888  000AC6  243E               	addwf	dtoa@i^0,w,c
  1889  000AC8  6ED9               	movwf	fsr2l,c
  1890  000ACA  0E00               	movlw	high _dbuf
  1891  000ACC  203F               	addwfc	(dtoa@i+1)^0,w,c
  1892  000ACE  6EDA               	movwf	fsr2h,c
  1893  000AD0  C02E  FFDF         	movff	_dtoa$1145,indf2
  1894  000AD4                     l1540:
  1895                           
  1896                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1897  000AD4  C01C  F011         	movff	dtoa@fp,pad@fp
  1898  000AD8  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1899  000ADC  0E68               	movlw	low _dbuf
  1900  000ADE  243E               	addwf	dtoa@i^0,w,c
  1901  000AE0  6E13               	movwf	pad@buf^0,c
  1902  000AE2  0E00               	movlw	high _dbuf
  1903  000AE4  203F               	addwfc	(dtoa@i+1)^0,w,c
  1904  000AE6  6E14               	movwf	(pad@buf+1)^0,c
  1905  000AE8  C032  F015         	movff	dtoa@w,pad@p
  1906  000AEC  C033  F016         	movff	dtoa@w+1,pad@p+1
  1907  000AF0  EC34  F008         	call	_pad	;wreg free
  1908  000AF4  C011  F01C         	movff	?_pad,?_dtoa
  1909  000AF8  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1910  000AFC  0012               	return		;funcret
  1911  000AFE                     __end_of_dtoa:
  1912                           	callstack 0
  1913                           
  1914 ;; *************** function _pad *****************
  1915 ;; Defined at:
  1916 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1919 ;;		 -> sprintf@f(6), 
  1920 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1921 ;;		 -> dbuf(32), 
  1922 ;;  p               2   20[COMRAM] int 
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;  w               2   25[COMRAM] int 
  1925 ;;  i               2   23[COMRAM] int 
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  2   16[COMRAM] int 
  1928 ;; Registers used:
  1929 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1935 ;;      Params:         6       0       0       0       0       0       0       0       0
  1936 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1937 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1938 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1939 ;;Total ram usage:       11 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; Hardware stack levels required when called:    3
  1942 ;; This function calls:
  1943 ;;		_fputc
  1944 ;;		_fputs
  1945 ;;		_strlen
  1946 ;; This function is called by:
  1947 ;;		_dtoa
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text10
  1952  001068                     __ptext10:
  1953                           	callstack 0
  1954  001068                     _pad:
  1955                           	callstack 22
  1956  001068                     
  1957                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1958  001068  0100               	movlb	0	; () banked
  1959  00106A  A166               	btfss	_flags& (0+255),0,b
  1960  00106C  EF3A  F008         	goto	u771
  1961  001070  EF3C  F008         	goto	u770
  1962  001074                     u771:
  1963  001074  EF46  F008         	goto	l1460
  1964  001078                     u770:
  1965  001078                     
  1966                           ; BSR set to: 0
  1967                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1968  001078  C013  F00A         	movff	pad@buf,fputs@s
  1969  00107C  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1970  001080  C011  F00C         	movff	pad@fp,fputs@fp
  1971  001084  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1972  001088  EC70  F00A         	call	_fputs	;wreg free
  1973  00108C                     l1460:
  1974                           
  1975                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1976  00108C  BE16               	btfsc	(pad@p+1)^0,7,c
  1977  00108E  EF4B  F008         	goto	u781
  1978  001092  EF4D  F008         	goto	u780
  1979  001096                     u781:
  1980  001096  EF53  F008         	goto	l1464
  1981  00109A                     u780:
  1982  00109A  C015  F01A         	movff	pad@p,pad@w
  1983  00109E  C016  F01B         	movff	pad@p+1,pad@w+1
  1984  0010A2  EF57  F008         	goto	l815
  1985  0010A6                     l1464:
  1986  0010A6  0E00               	movlw	0
  1987  0010A8  6E1B               	movwf	(pad@w+1)^0,c
  1988  0010AA  0E00               	movlw	0
  1989  0010AC  6E1A               	movwf	pad@w^0,c
  1990  0010AE                     l815:
  1991                           
  1992                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1993  0010AE  0E00               	movlw	0
  1994  0010B0  6E19               	movwf	(pad@i+1)^0,c
  1995  0010B2  0E00               	movlw	0
  1996  0010B4  6E18               	movwf	pad@i^0,c
  1997                           
  1998                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1999  0010B6  EF69  F008         	goto	l1470
  2000  0010BA                     l1466:
  2001                           
  2002                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  2003  0010BA  0E00               	movlw	0
  2004  0010BC  6E02               	movwf	(fputc@c+1)^0,c
  2005  0010BE  0E20               	movlw	32
  2006  0010C0  6E01               	movwf	fputc@c^0,c
  2007  0010C2  C011  F003         	movff	pad@fp,fputc@fp
  2008  0010C6  C012  F004         	movff	pad@fp+1,fputc@fp+1
  2009  0010CA  ECCF  F007         	call	_fputc	;wreg free
  2010  0010CE                     
  2011                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 86:         ++i;
  2012  0010CE  4A18               	infsnz	pad@i^0,f,c
  2013  0010D0  2A19               	incf	(pad@i+1)^0,f,c
  2014  0010D2                     l1470:
  2015                           
  2016                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  2017  0010D2  501A               	movf	pad@w^0,w,c
  2018  0010D4  5C18               	subwf	pad@i^0,w,c
  2019  0010D6  5019               	movf	(pad@i+1)^0,w,c
  2020  0010D8  0A80               	xorlw	128
  2021  0010DA  6E17               	movwf	??_pad^0,c
  2022  0010DC  501B               	movf	(pad@w+1)^0,w,c
  2023  0010DE  0A80               	xorlw	128
  2024  0010E0  5817               	subwfb	??_pad^0,w,c
  2025  0010E2  A0D8               	btfss	status,0,c
  2026  0010E4  EF76  F008         	goto	u791
  2027  0010E8  EF78  F008         	goto	u790
  2028  0010EC                     u791:
  2029  0010EC  EF5D  F008         	goto	l1466
  2030  0010F0                     u790:
  2031  0010F0                     
  2032                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  2033  0010F0  0100               	movlb	0	; () banked
  2034  0010F2  B166               	btfsc	_flags& (0+255),0,b
  2035  0010F4  EF7E  F008         	goto	u801
  2036  0010F8  EF80  F008         	goto	u800
  2037  0010FC                     u801:
  2038  0010FC  EF8A  F008         	goto	l1474
  2039  001100                     u800:
  2040  001100                     
  2041                           ; BSR set to: 0
  2042                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  2043  001100  C013  F00A         	movff	pad@buf,fputs@s
  2044  001104  C014  F00B         	movff	pad@buf+1,fputs@s+1
  2045  001108  C011  F00C         	movff	pad@fp,fputs@fp
  2046  00110C  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  2047  001110  EC70  F00A         	call	_fputs	;wreg free
  2048  001114                     l1474:
  2049                           
  2050                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  2051  001114  C013  F001         	movff	pad@buf,strlen@s
  2052  001118  C014  F002         	movff	pad@buf+1,strlen@s+1
  2053  00111C  ECEA  F00A         	call	_strlen	;wreg free
  2054  001120  501A               	movf	pad@w^0,w,c
  2055  001122  2401               	addwf	?_strlen^0,w,c
  2056  001124  6E11               	movwf	?_pad^0,c
  2057  001126  501B               	movf	(pad@w+1)^0,w,c
  2058  001128  2002               	addwfc	(?_strlen+1)^0,w,c
  2059  00112A  6E12               	movwf	(?_pad+1)^0,c
  2060  00112C  0012               	return		;funcret
  2061  00112E                     __end_of_pad:
  2062                           	callstack 0
  2063                           
  2064 ;; *************** function _strlen *****************
  2065 ;; Defined at:
  2066 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\strlen.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2069 ;;		 -> dbuf(32), 
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2072 ;;		 -> dbuf(32), 
  2073 ;; Return value:  Size  Location     Type
  2074 ;;                  2    0[COMRAM] unsigned int 
  2075 ;; Registers used:
  2076 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2077 ;; Tracked objects:
  2078 ;;		On entry : 0/0
  2079 ;;		On exit  : 0/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2082 ;;      Params:         2       0       0       0       0       0       0       0       0
  2083 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2084 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2085 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2086 ;;Total ram usage:        4 bytes
  2087 ;; Hardware stack levels used:    1
  2088 ;; This function calls:
  2089 ;;		Nothing
  2090 ;; This function is called by:
  2091 ;;		_pad
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text11
  2096  0015D4                     __ptext11:
  2097                           	callstack 0
  2098  0015D4                     _strlen:
  2099                           	callstack 24
  2100  0015D4  C001  F003         	movff	strlen@s,strlen@a
  2101  0015D8  C002  F004         	movff	strlen@s+1,strlen@a+1
  2102  0015DC  EFF2  F00A         	goto	l1370
  2103  0015E0                     l1368:
  2104  0015E0  4A01               	infsnz	strlen@s^0,f,c
  2105  0015E2  2A02               	incf	(strlen@s+1)^0,f,c
  2106  0015E4                     l1370:
  2107  0015E4  C001  FFD9         	movff	strlen@s,fsr2l
  2108  0015E8  C002  FFDA         	movff	strlen@s+1,fsr2h
  2109  0015EC  50DF               	movf	indf2,w,c
  2110  0015EE  A4D8               	btfss	status,2,c
  2111  0015F0  EFFC  F00A         	goto	u631
  2112  0015F4  EFFE  F00A         	goto	u630
  2113  0015F8                     u631:
  2114  0015F8  EFF0  F00A         	goto	l1368
  2115  0015FC                     u630:
  2116  0015FC  5003               	movf	strlen@a^0,w,c
  2117  0015FE  5C01               	subwf	strlen@s^0,w,c
  2118  001600  6E01               	movwf	?_strlen^0,c
  2119  001602  5004               	movf	(strlen@a+1)^0,w,c
  2120  001604  5802               	subwfb	(strlen@s+1)^0,w,c
  2121  001606  6E02               	movwf	(?_strlen+1)^0,c
  2122  001608  0012               	return		;funcret
  2123  00160A                     __end_of_strlen:
  2124                           	callstack 0
  2125                           
  2126 ;; *************** function _fputs *****************
  2127 ;; Defined at:
  2128 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputs.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2131 ;;		 -> dbuf(32), 
  2132 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  2133 ;;		 -> sprintf@f(6), 
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;  i               2   14[COMRAM] int 
  2136 ;;  c               1   13[COMRAM] unsigned char 
  2137 ;; Return value:  Size  Location     Type
  2138 ;;                  2    9[COMRAM] int 
  2139 ;; Registers used:
  2140 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2141 ;; Tracked objects:
  2142 ;;		On entry : 0/0
  2143 ;;		On exit  : 0/0
  2144 ;;		Unchanged: 0/0
  2145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2146 ;;      Params:         4       0       0       0       0       0       0       0       0
  2147 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2148 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2149 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2150 ;;Total ram usage:        7 bytes
  2151 ;; Hardware stack levels used:    1
  2152 ;; Hardware stack levels required when called:    2
  2153 ;; This function calls:
  2154 ;;		_fputc
  2155 ;; This function is called by:
  2156 ;;		_pad
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           	psect	text12
  2161  0014E0                     __ptext12:
  2162                           	callstack 0
  2163  0014E0                     _fputs:
  2164                           	callstack 22
  2165  0014E0  0E00               	movlw	0
  2166  0014E2  6E10               	movwf	(fputs@i+1)^0,c
  2167  0014E4  0E00               	movlw	0
  2168  0014E6  6E0F               	movwf	fputs@i^0,c
  2169  0014E8  EF81  F00A         	goto	l1364
  2170  0014EC                     l1360:
  2171  0014EC  C00E  F001         	movff	fputs@c,fputc@c
  2172  0014F0  6A02               	clrf	(fputc@c+1)^0,c
  2173  0014F2  C00C  F003         	movff	fputs@fp,fputc@fp
  2174  0014F6  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2175  0014FA  ECCF  F007         	call	_fputc	;wreg free
  2176  0014FE  4A0F               	infsnz	fputs@i^0,f,c
  2177  001500  2A10               	incf	(fputs@i+1)^0,f,c
  2178  001502                     l1364:
  2179  001502  500F               	movf	fputs@i^0,w,c
  2180  001504  240A               	addwf	fputs@s^0,w,c
  2181  001506  6ED9               	movwf	fsr2l,c
  2182  001508  5010               	movf	(fputs@i+1)^0,w,c
  2183  00150A  200B               	addwfc	(fputs@s+1)^0,w,c
  2184  00150C  6EDA               	movwf	fsr2h,c
  2185  00150E  50DF               	movf	indf2,w,c
  2186  001510  6E0E               	movwf	fputs@c^0,c
  2187  001512  500E               	movf	fputs@c^0,w,c
  2188  001514  A4D8               	btfss	status,2,c
  2189  001516  EF8F  F00A         	goto	u621
  2190  00151A  EF91  F00A         	goto	u620
  2191  00151E                     u621:
  2192  00151E  EF76  F00A         	goto	l1360
  2193  001522                     u620:
  2194  001522  0012               	return		;funcret
  2195  001524                     __end_of_fputs:
  2196                           	callstack 0
  2197                           
  2198 ;; *************** function _fputc *****************
  2199 ;; Defined at:
  2200 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\nf_fputc.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  c               2    0[COMRAM] int 
  2203 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2204 ;;		 -> sprintf@f(6), 
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;		None
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  2    0[COMRAM] int 
  2209 ;; Registers used:
  2210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2216 ;;      Params:         4       0       0       0       0       0       0       0       0
  2217 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2218 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2219 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2220 ;;Total ram usage:        9 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    1
  2223 ;; This function calls:
  2224 ;;		_putch
  2225 ;; This function is called by:
  2226 ;;		_pad
  2227 ;;		_vfpfcnvrt
  2228 ;;		_fputs
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text13
  2233  000F9E                     __ptext13:
  2234                           	callstack 0
  2235  000F9E                     _fputc:
  2236                           	callstack 25
  2237  000F9E  5003               	movf	fputc@fp^0,w,c
  2238  000FA0  1004               	iorwf	(fputc@fp+1)^0,w,c
  2239  000FA2  B4D8               	btfsc	status,2,c
  2240  000FA4  EFD6  F007         	goto	u581
  2241  000FA8  EFD8  F007         	goto	u580
  2242  000FAC                     u581:
  2243  000FAC  EFE1  F007         	goto	l1348
  2244  000FB0                     u580:
  2245  000FB0  5003               	movf	fputc@fp^0,w,c
  2246  000FB2  1004               	iorwf	(fputc@fp+1)^0,w,c
  2247  000FB4  A4D8               	btfss	status,2,c
  2248  000FB6  EFDF  F007         	goto	u591
  2249  000FBA  EFE1  F007         	goto	u590
  2250  000FBE                     u591:
  2251  000FBE  EFE6  F007         	goto	l1350
  2252  000FC2                     u590:
  2253  000FC2                     l1348:
  2254  000FC2  5001               	movf	fputc@c^0,w,c
  2255  000FC4  EC4A  F00B         	call	_putch
  2256  000FC8  EF33  F008         	goto	l879
  2257  000FCC                     l1350:
  2258  000FCC  EE20 F004          	lfsr	2,4
  2259  000FD0  5003               	movf	fputc@fp^0,w,c
  2260  000FD2  26D9               	addwf	fsr2l,f,c
  2261  000FD4  5004               	movf	(fputc@fp+1)^0,w,c
  2262  000FD6  22DA               	addwfc	fsr2h,f,c
  2263  000FD8  50DE               	movf	postinc2,w,c
  2264  000FDA  10DE               	iorwf	postinc2,w,c
  2265  000FDC  B4D8               	btfsc	status,2,c
  2266  000FDE  EFF3  F007         	goto	u601
  2267  000FE2  EFF5  F007         	goto	u600
  2268  000FE6                     u601:
  2269  000FE6  EF10  F008         	goto	l1354
  2270  000FEA                     u600:
  2271  000FEA  EE20 F004          	lfsr	2,4
  2272  000FEE  5003               	movf	fputc@fp^0,w,c
  2273  000FF0  26D9               	addwf	fsr2l,f,c
  2274  000FF2  5004               	movf	(fputc@fp+1)^0,w,c
  2275  000FF4  22DA               	addwfc	fsr2h,f,c
  2276  000FF6  EE10 F002          	lfsr	1,2
  2277  000FFA  5003               	movf	fputc@fp^0,w,c
  2278  000FFC  26E1               	addwf	fsr1l,f,c
  2279  000FFE  5004               	movf	(fputc@fp+1)^0,w,c
  2280  001000  22E2               	addwfc	fsr1h,f,c
  2281  001002  50DE               	movf	postinc2,w,c
  2282  001004  5CE6               	subwf	postinc1,w,c
  2283  001006  50E6               	movf	postinc1,w,c
  2284  001008  0A80               	xorlw	128
  2285  00100A  6E09               	movwf	(??_fputc+4)^0,c
  2286  00100C  50DE               	movf	postinc2,w,c
  2287  00100E  0A80               	xorlw	128
  2288  001010  5809               	subwfb	(??_fputc+4)^0,w,c
  2289  001012  B0D8               	btfsc	status,0,c
  2290  001014  EF0E  F008         	goto	u611
  2291  001018  EF10  F008         	goto	u610
  2292  00101C                     u611:
  2293  00101C  EF33  F008         	goto	l879
  2294  001020                     u610:
  2295  001020                     l1354:
  2296  001020  EE20 F002          	lfsr	2,2
  2297  001024  5003               	movf	fputc@fp^0,w,c
  2298  001026  26D9               	addwf	fsr2l,f,c
  2299  001028  5004               	movf	(fputc@fp+1)^0,w,c
  2300  00102A  22DA               	addwfc	fsr2h,f,c
  2301  00102C  CFDE F005          	movff	postinc2,??_fputc
  2302  001030  CFDD F006          	movff	postdec2,??_fputc+1
  2303  001034  C003  FFD9         	movff	fputc@fp,fsr2l
  2304  001038  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2305  00103C  CFDE F007          	movff	postinc2,??_fputc+2
  2306  001040  CFDD F008          	movff	postdec2,??_fputc+3
  2307  001044  5005               	movf	??_fputc^0,w,c
  2308  001046  2407               	addwf	(??_fputc+2)^0,w,c
  2309  001048  6ED9               	movwf	fsr2l,c
  2310  00104A  5006               	movf	(??_fputc+1)^0,w,c
  2311  00104C  2008               	addwfc	(??_fputc+3)^0,w,c
  2312  00104E  6EDA               	movwf	fsr2h,c
  2313  001050  C001  FFDF         	movff	fputc@c,indf2
  2314  001054  EE20 F002          	lfsr	2,2
  2315  001058  5003               	movf	fputc@fp^0,w,c
  2316  00105A  26D9               	addwf	fsr2l,f,c
  2317  00105C  5004               	movf	(fputc@fp+1)^0,w,c
  2318  00105E  22DA               	addwfc	fsr2h,f,c
  2319  001060  2ADE               	incf	postinc2,f,c
  2320  001062  0E00               	movlw	0
  2321  001064  22DD               	addwfc	postdec2,f,c
  2322  001066                     l879:
  2323  001066  0012               	return		;funcret
  2324  001068                     __end_of_fputc:
  2325                           	callstack 0
  2326                           
  2327 ;; *************** function _putch *****************
  2328 ;; Defined at:
  2329 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\putch.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  c               1    wreg     unsigned char 
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;  c               1    0[COMRAM] unsigned char 
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  1    wreg      void 
  2336 ;; Registers used:
  2337 ;;		wreg
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2343 ;;      Params:         0       0       0       0       0       0       0       0       0
  2344 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2345 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2346 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2347 ;;Total ram usage:        0 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		_fputc
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text14
  2357  001694                     __ptext14:
  2358                           	callstack 0
  2359  001694                     _putch:
  2360                           	callstack 25
  2361  001694  0012               	return		;funcret
  2362  001696                     __end_of_putch:
  2363                           	callstack 0
  2364                           
  2365 ;; *************** function _abs *****************
  2366 ;; Defined at:
  2367 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\abs.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;  a               2   18[COMRAM] int 
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;		None
  2372 ;; Return value:  Size  Location     Type
  2373 ;;                  2   18[COMRAM] int 
  2374 ;; Registers used:
  2375 ;;		wreg, status,2, status,0
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2381 ;;      Params:         2       0       0       0       0       0       0       0       0
  2382 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2383 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2384 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2385 ;;Total ram usage:        4 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; This function calls:
  2388 ;;		Nothing
  2389 ;; This function is called by:
  2390 ;;		_dtoa
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text15
  2395  001524                     __ptext15:
  2396                           	callstack 0
  2397  001524                     _abs:
  2398                           	callstack 25
  2399  001524  BE14               	btfsc	(abs@a+1)^0,7,c
  2400  001526  EF9F  F00A         	goto	u810
  2401  00152A  5014               	movf	(abs@a+1)^0,w,c
  2402  00152C  E106               	bnz	u811
  2403  00152E  0413               	decf	abs@a^0,w,c
  2404  001530  B0D8               	btfsc	status,0,c
  2405  001532  EF9D  F00A         	goto	u811
  2406  001536  EF9F  F00A         	goto	u810
  2407  00153A                     u811:
  2408  00153A  EFAD  F00A         	goto	l864
  2409  00153E                     u810:
  2410  00153E  C013  F015         	movff	abs@a,??_abs
  2411  001542  C014  F016         	movff	abs@a+1,??_abs+1
  2412  001546  1E15               	comf	??_abs^0,f,c
  2413  001548  1E16               	comf	(??_abs+1)^0,f,c
  2414  00154A  4A15               	infsnz	??_abs^0,f,c
  2415  00154C  2A16               	incf	(??_abs+1)^0,f,c
  2416  00154E  C015  F013         	movff	??_abs,?_abs
  2417  001552  C016  F014         	movff	??_abs+1,?_abs+1
  2418  001556  EFB1  F00A         	goto	l867
  2419  00155A                     l864:
  2420  00155A  C013  F013         	movff	abs@a,?_abs
  2421  00155E  C014  F014         	movff	abs@a+1,?_abs+1
  2422  001562                     l867:
  2423  001562  0012               	return		;funcret
  2424  001564                     __end_of_abs:
  2425                           	callstack 0
  2426                           
  2427 ;; *************** function ___aomod *****************
  2428 ;; Defined at:
  2429 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aomod.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;  dividend        8    0[COMRAM] long long 
  2432 ;;  divisor         8    8[COMRAM] long long 
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;  sign            1   17[COMRAM] unsigned char 
  2435 ;;  counter         1   16[COMRAM] unsigned char 
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  8    0[COMRAM] long long 
  2438 ;; Registers used:
  2439 ;;		wreg, status,2, status,0
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2445 ;;      Params:        16       0       0       0       0       0       0       0       0
  2446 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2447 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2448 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2449 ;;Total ram usage:       18 bytes
  2450 ;; Hardware stack levels used:    1
  2451 ;; This function calls:
  2452 ;;		Nothing
  2453 ;; This function is called by:
  2454 ;;		_dtoa
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           	psect	text16
  2459  000E3A                     __ptext16:
  2460                           	callstack 0
  2461  000E3A                     ___aomod:
  2462                           	callstack 25
  2463  000E3A  0E00               	movlw	0
  2464  000E3C  6E12               	movwf	___aomod@sign^0,c
  2465  000E3E  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2466  000E40  EF26  F007         	goto	u710
  2467  000E44  EF24  F007         	goto	u711
  2468  000E48                     u711:
  2469  000E48  EF38  F007         	goto	l1428
  2470  000E4C                     u710:
  2471  000E4C  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2472  000E4E  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2473  000E50  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2474  000E52  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2475  000E54  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2476  000E56  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2477  000E58  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2478  000E5A  6C01               	negf	___aomod@dividend^0,c
  2479  000E5C  0E00               	movlw	0
  2480  000E5E  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2481  000E60  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2482  000E62  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2483  000E64  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2484  000E66  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2485  000E68  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2486  000E6A  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2487  000E6C  0E01               	movlw	1
  2488  000E6E  6E12               	movwf	___aomod@sign^0,c
  2489  000E70                     l1428:
  2490  000E70  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2491  000E72  EF3F  F007         	goto	u720
  2492  000E76  EF3D  F007         	goto	u721
  2493  000E7A                     u721:
  2494  000E7A  EF4F  F007         	goto	l1432
  2495  000E7E                     u720:
  2496  000E7E  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2497  000E80  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2498  000E82  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2499  000E84  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2500  000E86  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2501  000E88  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2502  000E8A  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2503  000E8C  6C09               	negf	___aomod@divisor^0,c
  2504  000E8E  0E00               	movlw	0
  2505  000E90  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2506  000E92  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2507  000E94  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2508  000E96  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2509  000E98  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2510  000E9A  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2511  000E9C  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2512  000E9E                     l1432:
  2513  000E9E  5009               	movf	___aomod@divisor^0,w,c
  2514  000EA0  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2515  000EA2  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2516  000EA4  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2517  000EA6  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2518  000EA8  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2519  000EAA  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2520  000EAC  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2521  000EAE  B4D8               	btfsc	status,2,c
  2522  000EB0  EF5C  F007         	goto	u731
  2523  000EB4  EF5E  F007         	goto	u730
  2524  000EB8                     u731:
  2525  000EB8  EFA6  F007         	goto	l1448
  2526  000EBC                     u730:
  2527  000EBC  0E01               	movlw	1
  2528  000EBE  6E11               	movwf	___aomod@counter^0,c
  2529  000EC0  EF6C  F007         	goto	l1438
  2530  000EC4                     l1436:
  2531  000EC4  90D8               	bcf	status,0,c
  2532  000EC6  3609               	rlcf	___aomod@divisor^0,f,c
  2533  000EC8  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2534  000ECA  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2535  000ECC  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2536  000ECE  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2537  000ED0  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2538  000ED2  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2539  000ED4  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2540  000ED6  2A11               	incf	___aomod@counter^0,f,c
  2541  000ED8                     l1438:
  2542  000ED8  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2543  000EDA  EF71  F007         	goto	u741
  2544  000EDE  EF73  F007         	goto	u740
  2545  000EE2                     u741:
  2546  000EE2  EF62  F007         	goto	l1436
  2547  000EE6                     u740:
  2548  000EE6                     l1440:
  2549  000EE6  5009               	movf	___aomod@divisor^0,w,c
  2550  000EE8  5C01               	subwf	___aomod@dividend^0,w,c
  2551  000EEA  500A               	movf	(___aomod@divisor+1)^0,w,c
  2552  000EEC  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2553  000EEE  500B               	movf	(___aomod@divisor+2)^0,w,c
  2554  000EF0  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2555  000EF2  500C               	movf	(___aomod@divisor+3)^0,w,c
  2556  000EF4  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2557  000EF6  500D               	movf	(___aomod@divisor+4)^0,w,c
  2558  000EF8  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2559  000EFA  500E               	movf	(___aomod@divisor+5)^0,w,c
  2560  000EFC  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2561  000EFE  500F               	movf	(___aomod@divisor+6)^0,w,c
  2562  000F00  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2563  000F02  5010               	movf	(___aomod@divisor+7)^0,w,c
  2564  000F04  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2565  000F06  A0D8               	btfss	status,0,c
  2566  000F08  EF88  F007         	goto	u751
  2567  000F0C  EF8A  F007         	goto	u750
  2568  000F10                     u751:
  2569  000F10  EF9A  F007         	goto	l1444
  2570  000F14                     u750:
  2571  000F14  5009               	movf	___aomod@divisor^0,w,c
  2572  000F16  5E01               	subwf	___aomod@dividend^0,f,c
  2573  000F18  500A               	movf	(___aomod@divisor+1)^0,w,c
  2574  000F1A  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2575  000F1C  500B               	movf	(___aomod@divisor+2)^0,w,c
  2576  000F1E  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2577  000F20  500C               	movf	(___aomod@divisor+3)^0,w,c
  2578  000F22  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2579  000F24  500D               	movf	(___aomod@divisor+4)^0,w,c
  2580  000F26  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2581  000F28  500E               	movf	(___aomod@divisor+5)^0,w,c
  2582  000F2A  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2583  000F2C  500F               	movf	(___aomod@divisor+6)^0,w,c
  2584  000F2E  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2585  000F30  5010               	movf	(___aomod@divisor+7)^0,w,c
  2586  000F32  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2587  000F34                     l1444:
  2588  000F34  90D8               	bcf	status,0,c
  2589  000F36  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2590  000F38  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2591  000F3A  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2592  000F3C  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2593  000F3E  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2594  000F40  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2595  000F42  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2596  000F44  3209               	rrcf	___aomod@divisor^0,f,c
  2597  000F46  2E11               	decfsz	___aomod@counter^0,f,c
  2598  000F48  EF73  F007         	goto	l1440
  2599  000F4C                     l1448:
  2600  000F4C  5012               	movf	___aomod@sign^0,w,c
  2601  000F4E  B4D8               	btfsc	status,2,c
  2602  000F50  EFAC  F007         	goto	u761
  2603  000F54  EFAE  F007         	goto	u760
  2604  000F58                     u761:
  2605  000F58  EFBE  F007         	goto	l1452
  2606  000F5C                     u760:
  2607  000F5C  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2608  000F5E  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2609  000F60  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2610  000F62  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2611  000F64  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2612  000F66  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2613  000F68  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2614  000F6A  6C01               	negf	___aomod@dividend^0,c
  2615  000F6C  0E00               	movlw	0
  2616  000F6E  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2617  000F70  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2618  000F72  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2619  000F74  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2620  000F76  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2621  000F78  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2622  000F7A  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2623  000F7C                     l1452:
  2624  000F7C  C001  F001         	movff	___aomod@dividend,?___aomod
  2625  000F80  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2626  000F84  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2627  000F88  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2628  000F8C  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2629  000F90  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2630  000F94  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2631  000F98  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2632  000F9C  0012               	return		;funcret
  2633  000F9E                     __end_of___aomod:
  2634                           	callstack 0
  2635                           
  2636 ;; *************** function ___aodiv *****************
  2637 ;; Defined at:
  2638 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\aodiv.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;  dividend        8    0[COMRAM] long long 
  2641 ;;  divisor         8    8[COMRAM] long long 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  quotient        8   18[COMRAM] long long 
  2644 ;;  sign            1   17[COMRAM] unsigned char 
  2645 ;;  counter         1   16[COMRAM] unsigned char 
  2646 ;; Return value:  Size  Location     Type
  2647 ;;                  8    0[COMRAM] long long 
  2648 ;; Registers used:
  2649 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2650 ;; Tracked objects:
  2651 ;;		On entry : 0/0
  2652 ;;		On exit  : 0/0
  2653 ;;		Unchanged: 0/0
  2654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2655 ;;      Params:        16       0       0       0       0       0       0       0       0
  2656 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2658 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2659 ;;Total ram usage:       26 bytes
  2660 ;; Hardware stack levels used:    1
  2661 ;; This function calls:
  2662 ;;		Nothing
  2663 ;; This function is called by:
  2664 ;;		_dtoa
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           	psect	text17
  2669  000CB2                     __ptext17:
  2670                           	callstack 0
  2671  000CB2                     ___aodiv:
  2672                           	callstack 25
  2673  000CB2  0E00               	movlw	0
  2674  000CB4  6E12               	movwf	___aodiv@sign^0,c
  2675  000CB6  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2676  000CB8  EF62  F006         	goto	u640
  2677  000CBC  EF60  F006         	goto	u641
  2678  000CC0                     u641:
  2679  000CC0  EF74  F006         	goto	l1384
  2680  000CC4                     u640:
  2681  000CC4  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2682  000CC6  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2683  000CC8  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2684  000CCA  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2685  000CCC  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2686  000CCE  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2687  000CD0  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2688  000CD2  6C09               	negf	___aodiv@divisor^0,c
  2689  000CD4  0E00               	movlw	0
  2690  000CD6  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2691  000CD8  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2692  000CDA  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2693  000CDC  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2694  000CDE  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2695  000CE0  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2696  000CE2  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2697  000CE4  0E01               	movlw	1
  2698  000CE6  6E12               	movwf	___aodiv@sign^0,c
  2699  000CE8                     l1384:
  2700  000CE8  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2701  000CEA  EF7B  F006         	goto	u650
  2702  000CEE  EF79  F006         	goto	u651
  2703  000CF2                     u651:
  2704  000CF2  EF8D  F006         	goto	l1390
  2705  000CF6                     u650:
  2706  000CF6  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2707  000CF8  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2708  000CFA  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2709  000CFC  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2710  000CFE  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2711  000D00  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2712  000D02  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2713  000D04  6C01               	negf	___aodiv@dividend^0,c
  2714  000D06  0E00               	movlw	0
  2715  000D08  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2716  000D0A  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2717  000D0C  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2718  000D0E  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2719  000D10  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2720  000D12  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2721  000D14  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2722  000D16  0E01               	movlw	1
  2723  000D18  1A12               	xorwf	___aodiv@sign^0,f,c
  2724  000D1A                     l1390:
  2725  000D1A  EE20  F013         	lfsr	2,___aodiv@quotient
  2726  000D1E  0E07               	movlw	7
  2727  000D20                     u661:
  2728  000D20  6ADE               	clrf	postinc2,c
  2729  000D22  06E8               	decf	wreg,f,c
  2730  000D24  E2FD               	bc	u661
  2731  000D26  5009               	movf	___aodiv@divisor^0,w,c
  2732  000D28  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2733  000D2A  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2734  000D2C  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2735  000D2E  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2736  000D30  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2737  000D32  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2738  000D34  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2739  000D36  B4D8               	btfsc	status,2,c
  2740  000D38  EFA0  F006         	goto	u671
  2741  000D3C  EFA2  F006         	goto	u670
  2742  000D40                     u671:
  2743  000D40  EFF4  F006         	goto	l1412
  2744  000D44                     u670:
  2745  000D44  0E01               	movlw	1
  2746  000D46  6E11               	movwf	___aodiv@counter^0,c
  2747  000D48  EFB0  F006         	goto	l1398
  2748  000D4C                     l1396:
  2749  000D4C  90D8               	bcf	status,0,c
  2750  000D4E  3609               	rlcf	___aodiv@divisor^0,f,c
  2751  000D50  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2752  000D52  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2753  000D54  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2754  000D56  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2755  000D58  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2756  000D5A  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2757  000D5C  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2758  000D5E  2A11               	incf	___aodiv@counter^0,f,c
  2759  000D60                     l1398:
  2760  000D60  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2761  000D62  EFB5  F006         	goto	u681
  2762  000D66  EFB7  F006         	goto	u680
  2763  000D6A                     u681:
  2764  000D6A  EFA6  F006         	goto	l1396
  2765  000D6E                     u680:
  2766  000D6E                     l1400:
  2767  000D6E  90D8               	bcf	status,0,c
  2768  000D70  3613               	rlcf	___aodiv@quotient^0,f,c
  2769  000D72  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2770  000D74  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2771  000D76  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2772  000D78  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2773  000D7A  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2774  000D7C  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2775  000D7E  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2776  000D80  5009               	movf	___aodiv@divisor^0,w,c
  2777  000D82  5C01               	subwf	___aodiv@dividend^0,w,c
  2778  000D84  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2779  000D86  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2780  000D88  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2781  000D8A  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2782  000D8C  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2783  000D8E  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2784  000D90  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2785  000D92  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2786  000D94  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2787  000D96  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2788  000D98  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2789  000D9A  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2790  000D9C  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2791  000D9E  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2792  000DA0  A0D8               	btfss	status,0,c
  2793  000DA2  EFD5  F006         	goto	u691
  2794  000DA6  EFD7  F006         	goto	u690
  2795  000DAA                     u691:
  2796  000DAA  EFE8  F006         	goto	l1408
  2797  000DAE                     u690:
  2798  000DAE  5009               	movf	___aodiv@divisor^0,w,c
  2799  000DB0  5E01               	subwf	___aodiv@dividend^0,f,c
  2800  000DB2  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2801  000DB4  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2802  000DB6  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2803  000DB8  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2804  000DBA  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2805  000DBC  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2806  000DBE  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2807  000DC0  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2808  000DC2  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2809  000DC4  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2810  000DC6  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2811  000DC8  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2812  000DCA  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2813  000DCC  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2814  000DCE  8013               	bsf	___aodiv@quotient^0,0,c
  2815  000DD0                     l1408:
  2816  000DD0  90D8               	bcf	status,0,c
  2817  000DD2  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2818  000DD4  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2819  000DD6  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2820  000DD8  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2821  000DDA  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2822  000DDC  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2823  000DDE  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2824  000DE0  3209               	rrcf	___aodiv@divisor^0,f,c
  2825  000DE2  2E11               	decfsz	___aodiv@counter^0,f,c
  2826  000DE4  EFB7  F006         	goto	l1400
  2827  000DE8                     l1412:
  2828  000DE8  5012               	movf	___aodiv@sign^0,w,c
  2829  000DEA  B4D8               	btfsc	status,2,c
  2830  000DEC  EFFA  F006         	goto	u701
  2831  000DF0  EFFC  F006         	goto	u700
  2832  000DF4                     u701:
  2833  000DF4  EF0C  F007         	goto	l1416
  2834  000DF8                     u700:
  2835  000DF8  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2836  000DFA  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2837  000DFC  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2838  000DFE  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2839  000E00  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2840  000E02  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2841  000E04  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2842  000E06  6C13               	negf	___aodiv@quotient^0,c
  2843  000E08  0E00               	movlw	0
  2844  000E0A  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2845  000E0C  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2846  000E0E  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2847  000E10  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2848  000E12  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2849  000E14  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2850  000E16  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2851  000E18                     l1416:
  2852  000E18  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2853  000E1C  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2854  000E20  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2855  000E24  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2856  000E28  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2857  000E2C  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2858  000E30  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2859  000E34  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2860  000E38  0012               	return		;funcret
  2861  000E3A                     __end_of___aodiv:
  2862                           	callstack 0
  2863                           
  2864 ;; *************** function _Lcd_Write_String *****************
  2865 ;; Defined at:
  2866 ;;		line 455 in file "Dispensador.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  a               2    4[COMRAM] PTR unsigned char 
  2869 ;;		 -> STR_4(11), STR_3(5), Estado_Sis@aux(5), STR_1(6), 
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;  i               2    8[COMRAM] int 
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  1    wreg      void 
  2874 ;; Registers used:
  2875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2881 ;;      Params:         2       0       0       0       0       0       0       0       0
  2882 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2883 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2884 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2885 ;;Total ram usage:        6 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; Hardware stack levels required when called:    2
  2888 ;; This function calls:
  2889 ;;		_Lcd_Write_Char
  2890 ;; This function is called by:
  2891 ;;		_Estado_Sis
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text18
  2896  0011B2                     __ptext18:
  2897                           	callstack 0
  2898  0011B2                     _Lcd_Write_String:
  2899                           	callstack 27
  2900  0011B2                     
  2901                           ;Dispensador.c: 461:  int i;;Dispensador.c: 462:  for(i=0;a[i]!='\0';i++)
  2902  0011B2  0E00               	movlw	0
  2903  0011B4  6E0A               	movwf	(Lcd_Write_String@i+1)^0,c
  2904  0011B6  0E00               	movlw	0
  2905  0011B8  6E09               	movwf	Lcd_Write_String@i^0,c
  2906  0011BA  EFF9  F008         	goto	l1718
  2907  0011BE                     l1714:
  2908                           
  2909                           ;Dispensador.c: 463:     Lcd_Write_Char(a[i]);
  2910  0011BE  5009               	movf	Lcd_Write_String@i^0,w,c
  2911  0011C0  2405               	addwf	Lcd_Write_String@a^0,w,c
  2912  0011C2  6E07               	movwf	??_Lcd_Write_String^0,c
  2913  0011C4  500A               	movf	(Lcd_Write_String@i+1)^0,w,c
  2914  0011C6  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2915  0011C8  6E08               	movwf	(??_Lcd_Write_String+1)^0,c
  2916  0011CA  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  2917  0011CE  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  2918  0011D2  6AF8               	clrf	tblptru,c
  2919  0011D4  0E07               	movlw	(high __ramtop+-1)
  2920  0011D6  64F7               	cpfsgt	tblptrh,c
  2921  0011D8  D003               	bra	u1107
  2922  0011DA  0008               	tblrd		*
  2923  0011DC  50F5               	movf	tablat,w,c
  2924  0011DE  D005               	bra	u1100
  2925  0011E0                     u1107:
  2926  0011E0  CFF6 FFE1          	movff	tblptrl,fsr1l
  2927  0011E4  CFF7 FFE2          	movff	tblptrh,fsr1h
  2928  0011E8  50E7               	movf	indf1,w,c
  2929  0011EA                     u1100:
  2930  0011EA  ECCE  F00A         	call	_Lcd_Write_Char
  2931  0011EE  4A09               	infsnz	Lcd_Write_String@i^0,f,c
  2932  0011F0  2A0A               	incf	(Lcd_Write_String@i+1)^0,f,c
  2933  0011F2                     l1718:
  2934  0011F2  5009               	movf	Lcd_Write_String@i^0,w,c
  2935  0011F4  2405               	addwf	Lcd_Write_String@a^0,w,c
  2936  0011F6  6E07               	movwf	??_Lcd_Write_String^0,c
  2937  0011F8  500A               	movf	(Lcd_Write_String@i+1)^0,w,c
  2938  0011FA  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  2939  0011FC  6E08               	movwf	(??_Lcd_Write_String+1)^0,c
  2940  0011FE  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  2941  001202  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  2942  001206  6AF8               	clrf	tblptru,c
  2943  001208  0E07               	movlw	(high __ramtop+-1)
  2944  00120A  64F7               	cpfsgt	tblptrh,c
  2945  00120C  D003               	bra	u1117
  2946  00120E  0008               	tblrd		*
  2947  001210  50F5               	movf	tablat,w,c
  2948  001212  D005               	bra	u1110
  2949  001214                     u1117:
  2950  001214  CFF6 FFE1          	movff	tblptrl,fsr1l
  2951  001218  CFF7 FFE2          	movff	tblptrh,fsr1h
  2952  00121C  50E7               	movf	indf1,w,c
  2953  00121E                     u1110:
  2954  00121E  0900               	iorlw	0
  2955  001220  A4D8               	btfss	status,2,c
  2956  001222  EF15  F009         	goto	u1121
  2957  001226  EF17  F009         	goto	u1120
  2958  00122A                     u1121:
  2959  00122A  EFDF  F008         	goto	l1714
  2960  00122E                     u1120:
  2961  00122E  0012               	return		;funcret
  2962  001230                     __end_of_Lcd_Write_String:
  2963                           	callstack 0
  2964                           
  2965 ;; *************** function _Lcd_Write_Char *****************
  2966 ;; Defined at:
  2967 ;;		line 422 in file "Dispensador.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;  a               1    wreg     unsigned char 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  a               1    3[COMRAM] unsigned char 
  2972 ;;  y               1    2[COMRAM] unsigned char 
  2973 ;;  temp            1    1[COMRAM] unsigned char 
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, status,2, status,0, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2983 ;;      Params:         0       0       0       0       0       0       0       0       0
  2984 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2986 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2987 ;;Total ram usage:        3 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:    1
  2990 ;; This function calls:
  2991 ;;		_Lcd_Port
  2992 ;; This function is called by:
  2993 ;;		_Lcd_Write_String
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           	psect	text19
  2998  00159C                     __ptext19:
  2999                           	callstack 0
  3000  00159C                     _Lcd_Write_Char:
  3001                           	callstack 27
  3002                           
  3003                           ;incstack = 0
  3004                           ;Lcd_Write_Char@a stored from wreg
  3005  00159C  6E04               	movwf	Lcd_Write_Char@a^0,c
  3006  00159E                     
  3007                           ;Dispensador.c: 428:    char temp,y;;Dispensador.c: 429:    temp = a&0x0F;
  3008  00159E  5004               	movf	Lcd_Write_Char@a^0,w,c
  3009  0015A0  0B0F               	andlw	15
  3010  0015A2  6E02               	movwf	Lcd_Write_Char@temp^0,c
  3011                           
  3012                           ;Dispensador.c: 430:    y = a&0xF0;
  3013  0015A4  5004               	movf	Lcd_Write_Char@a^0,w,c
  3014  0015A6  0BF0               	andlw	240
  3015  0015A8  6E03               	movwf	Lcd_Write_Char@y^0,c
  3016  0015AA                     
  3017                           ;Dispensador.c: 431:    PORTBbits.RB7 = 1;
  3018  0015AA  8E81               	bsf	129,7,c	;volatile
  3019  0015AC                     
  3020                           ;Dispensador.c: 432:    Lcd_Port(y>>4);
  3021  0015AC  3803               	swapf	Lcd_Write_Char@y^0,w,c
  3022  0015AE  0B0F               	andlw	15
  3023  0015B0  ECF1  F009         	call	_Lcd_Port
  3024  0015B4                     
  3025                           ;Dispensador.c: 433:    PORTBbits.RB6 = 1;
  3026  0015B4  8C81               	bsf	129,6,c	;volatile
  3027  0015B6                     
  3028                           ;Dispensador.c: 434:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3029  0015B6  0E1A               	movlw	26
  3030  0015B8                     u1177:
  3031  0015B8  2EE8               	decfsz	wreg,f,c
  3032  0015BA  D7FE               	bra	u1177
  3033  0015BC  D000               	nop2	
  3034  0015BE                     
  3035                           ;Dispensador.c: 435:    PORTBbits.RB6 = 0;
  3036  0015BE  9C81               	bcf	129,6,c	;volatile
  3037  0015C0                     
  3038                           ;Dispensador.c: 436:    Lcd_Port(temp);
  3039  0015C0  5002               	movf	Lcd_Write_Char@temp^0,w,c
  3040  0015C2  ECF1  F009         	call	_Lcd_Port
  3041  0015C6                     
  3042                           ;Dispensador.c: 437:    PORTBbits.RB6 = 1;
  3043  0015C6  8C81               	bsf	129,6,c	;volatile
  3044  0015C8                     
  3045                           ;Dispensador.c: 438:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3046  0015C8  0E1A               	movlw	26
  3047  0015CA                     u1187:
  3048  0015CA  2EE8               	decfsz	wreg,f,c
  3049  0015CC  D7FE               	bra	u1187
  3050  0015CE  D000               	nop2	
  3051  0015D0                     
  3052                           ;Dispensador.c: 439:    PORTBbits.RB6 = 0;
  3053  0015D0  9C81               	bcf	129,6,c	;volatile
  3054  0015D2  0012               	return		;funcret
  3055  0015D4                     __end_of_Lcd_Write_Char:
  3056                           	callstack 0
  3057                           
  3058 ;; *************** function _Lcd_Set_Cursor *****************
  3059 ;; Defined at:
  3060 ;;		line 348 in file "Dispensador.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  a               1    wreg     unsigned char 
  3063 ;;  b               1    3[COMRAM] unsigned char 
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;  a               1    4[COMRAM] unsigned char 
  3066 ;;  temp            1    7[COMRAM] unsigned char 
  3067 ;;  y               1    6[COMRAM] unsigned char 
  3068 ;;  z               1    5[COMRAM] unsigned char 
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      void 
  3071 ;; Registers used:
  3072 ;;		wreg, status,2, status,0, cstack
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3078 ;;      Params:         1       0       0       0       0       0       0       0       0
  3079 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3080 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3081 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3082 ;;Total ram usage:        5 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    2
  3085 ;; This function calls:
  3086 ;;		_Lcd_Cmd
  3087 ;; This function is called by:
  3088 ;;		_Estado_Sis
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text20
  3093  00131A                     __ptext20:
  3094                           	callstack 0
  3095  00131A                     _Lcd_Set_Cursor:
  3096                           	callstack 27
  3097                           
  3098                           ;incstack = 0
  3099                           ;Lcd_Set_Cursor@a stored from wreg
  3100  00131A  6E05               	movwf	Lcd_Set_Cursor@a^0,c
  3101  00131C                     
  3102                           ;Dispensador.c: 354:  char temp,z,y;;Dispensador.c: 355:  if(a == 1)
  3103  00131C  0405               	decf	Lcd_Set_Cursor@a^0,w,c
  3104  00131E  A4D8               	btfss	status,2,c
  3105  001320  EF94  F009         	goto	u1081
  3106  001324  EF96  F009         	goto	u1080
  3107  001328                     u1081:
  3108  001328  EFA7  F009         	goto	l1704
  3109  00132C                     u1080:
  3110  00132C                     
  3111                           ;Dispensador.c: 356:  {;Dispensador.c: 357:    temp = 0x80 + b - 1;
  3112  00132C  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  3113  00132E  0F7F               	addlw	127
  3114  001330  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  3115                           
  3116                           ;Dispensador.c: 358:   z = temp>>4;
  3117  001332  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3118  001334  0B0F               	andlw	15
  3119  001336  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  3120                           
  3121                           ;Dispensador.c: 359:   y = temp & 0x0F;
  3122  001338  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  3123  00133A  0B0F               	andlw	15
  3124  00133C  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  3125  00133E                     
  3126                           ;Dispensador.c: 360:   Lcd_Cmd(z);
  3127  00133E  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  3128  001340  EC2F  F00B         	call	_Lcd_Cmd
  3129  001344                     
  3130                           ;Dispensador.c: 361:   Lcd_Cmd(y);
  3131  001344  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  3132  001346  EC2F  F00B         	call	_Lcd_Cmd
  3133                           
  3134                           ;Dispensador.c: 362:  }
  3135  00134A  EFBF  F009         	goto	l95
  3136  00134E                     l1704:
  3137  00134E  0E02               	movlw	2
  3138  001350  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
  3139  001352  A4D8               	btfss	status,2,c
  3140  001354  EFAE  F009         	goto	u1091
  3141  001358  EFB0  F009         	goto	u1090
  3142  00135C                     u1091:
  3143  00135C  EFBF  F009         	goto	l95
  3144  001360                     u1090:
  3145  001360                     
  3146                           ;Dispensador.c: 364:  {;Dispensador.c: 365:   temp = 0xC0 + b - 1;
  3147  001360  5004               	movf	Lcd_Set_Cursor@b^0,w,c
  3148  001362  0FBF               	addlw	191
  3149  001364  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
  3150                           
  3151                           ;Dispensador.c: 366:   z = temp>>4;
  3152  001366  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3153  001368  0B0F               	andlw	15
  3154  00136A  6E06               	movwf	Lcd_Set_Cursor@z^0,c
  3155                           
  3156                           ;Dispensador.c: 367:   y = temp & 0x0F;
  3157  00136C  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
  3158  00136E  0B0F               	andlw	15
  3159  001370  6E07               	movwf	Lcd_Set_Cursor@y^0,c
  3160  001372                     
  3161                           ;Dispensador.c: 368:   Lcd_Cmd(z);
  3162  001372  5006               	movf	Lcd_Set_Cursor@z^0,w,c
  3163  001374  EC2F  F00B         	call	_Lcd_Cmd
  3164  001378                     
  3165                           ;Dispensador.c: 369:   Lcd_Cmd(y);
  3166  001378  5007               	movf	Lcd_Set_Cursor@y^0,w,c
  3167  00137A  EC2F  F00B         	call	_Lcd_Cmd
  3168  00137E                     l95:
  3169  00137E  0012               	return		;funcret
  3170  001380                     __end_of_Lcd_Set_Cursor:
  3171                           	callstack 0
  3172                           
  3173 ;; *************** function _Lcd_Init *****************
  3174 ;; Defined at:
  3175 ;;		line 386 in file "Dispensador.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;		None
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;		None
  3180 ;; Return value:  Size  Location     Type
  3181 ;;                  1    wreg      void 
  3182 ;; Registers used:
  3183 ;;		wreg, status,2, cstack
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3189 ;;      Params:         0       0       0       0       0       0       0       0       0
  3190 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3191 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3192 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3193 ;;Total ram usage:        1 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:    2
  3196 ;; This function calls:
  3197 ;;		_Lcd_Cmd
  3198 ;;		_Lcd_Port
  3199 ;; This function is called by:
  3200 ;;		_Estado_Sis
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           	psect	text21
  3205  0012AA                     __ptext21:
  3206                           	callstack 0
  3207  0012AA                     _Lcd_Init:
  3208                           	callstack 27
  3209  0012AA                     
  3210                           ;Dispensador.c: 392:   Lcd_Port(0x00);
  3211  0012AA  0E00               	movlw	0
  3212  0012AC  ECF1  F009         	call	_Lcd_Port
  3213  0012B0                     
  3214                           ;Dispensador.c: 393:    _delay((unsigned long)((20)*(8000000/4000.0)));
  3215  0012B0  0E34               	movlw	52
  3216  0012B2  6E04               	movwf	??_Lcd_Init^0,c
  3217  0012B4  0EF2               	movlw	242
  3218  0012B6                     u1197:
  3219  0012B6  2EE8               	decfsz	wreg,f,c
  3220  0012B8  D7FE               	bra	u1197
  3221  0012BA  2E04               	decfsz	??_Lcd_Init^0,f,c
  3222  0012BC  D7FC               	bra	u1197
  3223  0012BE                     
  3224                           ;Dispensador.c: 394:   Lcd_Cmd(0x03);
  3225  0012BE  0E03               	movlw	3
  3226  0012C0  EC2F  F00B         	call	_Lcd_Cmd
  3227  0012C4                     
  3228                           ;Dispensador.c: 395:  _delay((unsigned long)((5)*(8000000/4000.0)));
  3229  0012C4  0E0D               	movlw	13
  3230  0012C6  6E04               	movwf	??_Lcd_Init^0,c
  3231  0012C8  0EFC               	movlw	252
  3232  0012CA                     u1207:
  3233  0012CA  2EE8               	decfsz	wreg,f,c
  3234  0012CC  D7FE               	bra	u1207
  3235  0012CE  2E04               	decfsz	??_Lcd_Init^0,f,c
  3236  0012D0  D7FC               	bra	u1207
  3237  0012D2                     
  3238                           ;Dispensador.c: 396:   Lcd_Cmd(0x03);
  3239  0012D2  0E03               	movlw	3
  3240  0012D4  EC2F  F00B         	call	_Lcd_Cmd
  3241  0012D8                     
  3242                           ;Dispensador.c: 397:  _delay((unsigned long)((11)*(8000000/4000.0)));
  3243  0012D8  0E1D               	movlw	29
  3244  0012DA  6E04               	movwf	??_Lcd_Init^0,c
  3245  0012DC  0E91               	movlw	145
  3246  0012DE                     u1217:
  3247  0012DE  2EE8               	decfsz	wreg,f,c
  3248  0012E0  D7FE               	bra	u1217
  3249  0012E2  2E04               	decfsz	??_Lcd_Init^0,f,c
  3250  0012E4  D7FC               	bra	u1217
  3251  0012E6  F000               	nop	
  3252  0012E8                     
  3253                           ;Dispensador.c: 398:   Lcd_Cmd(0x03);
  3254  0012E8  0E03               	movlw	3
  3255  0012EA  EC2F  F00B         	call	_Lcd_Cmd
  3256  0012EE                     
  3257                           ;Dispensador.c: 400:   Lcd_Cmd(0x02);
  3258  0012EE  0E02               	movlw	2
  3259  0012F0  EC2F  F00B         	call	_Lcd_Cmd
  3260  0012F4                     
  3261                           ;Dispensador.c: 401:   Lcd_Cmd(0x02);
  3262  0012F4  0E02               	movlw	2
  3263  0012F6  EC2F  F00B         	call	_Lcd_Cmd
  3264  0012FA                     
  3265                           ;Dispensador.c: 402:   Lcd_Cmd(0x08);
  3266  0012FA  0E08               	movlw	8
  3267  0012FC  EC2F  F00B         	call	_Lcd_Cmd
  3268  001300                     
  3269                           ;Dispensador.c: 403:   Lcd_Cmd(0x00);
  3270  001300  0E00               	movlw	0
  3271  001302  EC2F  F00B         	call	_Lcd_Cmd
  3272  001306                     
  3273                           ;Dispensador.c: 404:   Lcd_Cmd(0x0C);
  3274  001306  0E0C               	movlw	12
  3275  001308  EC2F  F00B         	call	_Lcd_Cmd
  3276  00130C                     
  3277                           ;Dispensador.c: 405:   Lcd_Cmd(0x00);
  3278  00130C  0E00               	movlw	0
  3279  00130E  EC2F  F00B         	call	_Lcd_Cmd
  3280  001312                     
  3281                           ;Dispensador.c: 406:   Lcd_Cmd(0x06);
  3282  001312  0E06               	movlw	6
  3283  001314  EC2F  F00B         	call	_Lcd_Cmd
  3284  001318  0012               	return		;funcret
  3285  00131A                     __end_of_Lcd_Init:
  3286                           	callstack 0
  3287                           
  3288 ;; *************** function _Lcd_Cmd *****************
  3289 ;; Defined at:
  3290 ;;		line 299 in file "Dispensador.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;  a               1    wreg     unsigned char 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  a               1    2[COMRAM] unsigned char 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3304 ;;      Params:         0       0       0       0       0       0       0       0       0
  3305 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3306 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3307 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3308 ;;Total ram usage:        2 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    1
  3311 ;; This function calls:
  3312 ;;		_Lcd_Port
  3313 ;; This function is called by:
  3314 ;;		_Lcd_Set_Cursor
  3315 ;;		_Lcd_Init
  3316 ;;		_Lcd_Clear
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text22
  3321  00165E                     __ptext22:
  3322                           	callstack 0
  3323  00165E                     _Lcd_Cmd:
  3324                           	callstack 27
  3325                           
  3326                           ;incstack = 0
  3327                           ;Lcd_Cmd@a stored from wreg
  3328  00165E  6E03               	movwf	Lcd_Cmd@a^0,c
  3329  001660                     
  3330                           ;Dispensador.c: 305:  PORTBbits.RB7 = 0;
  3331  001660  9E81               	bcf	129,7,c	;volatile
  3332  001662                     
  3333                           ;Dispensador.c: 306:  Lcd_Port(a);
  3334  001662  5003               	movf	Lcd_Cmd@a^0,w,c
  3335  001664  ECF1  F009         	call	_Lcd_Port
  3336  001668                     
  3337                           ;Dispensador.c: 307:  PORTBbits.RB6 = 1;
  3338  001668  8C81               	bsf	129,6,c	;volatile
  3339  00166A                     
  3340                           ;Dispensador.c: 308:         _delay((unsigned long)((4)*(8000000/4000.0)));
  3341  00166A  0E0B               	movlw	11
  3342  00166C  6E02               	movwf	??_Lcd_Cmd^0,c
  3343  00166E  0E62               	movlw	98
  3344  001670                     u1227:
  3345  001670  2EE8               	decfsz	wreg,f,c
  3346  001672  D7FE               	bra	u1227
  3347  001674  2E02               	decfsz	??_Lcd_Cmd^0,f,c
  3348  001676  D7FC               	bra	u1227
  3349  001678  D000               	nop2	
  3350  00167A                     
  3351                           ;Dispensador.c: 309:         PORTBbits.RB6 = 0;
  3352  00167A  9C81               	bcf	129,6,c	;volatile
  3353  00167C  0012               	return		;funcret
  3354  00167E                     __end_of_Lcd_Cmd:
  3355                           	callstack 0
  3356                           
  3357 ;; *************** function _Lcd_Port *****************
  3358 ;; Defined at:
  3359 ;;		line 259 in file "Dispensador.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  a               1    wreg     unsigned char 
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  a               1    0[COMRAM] unsigned char 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3373 ;;      Params:         0       0       0       0       0       0       0       0       0
  3374 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3376 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3377 ;;Total ram usage:        1 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; This function calls:
  3380 ;;		Nothing
  3381 ;; This function is called by:
  3382 ;;		_Lcd_Cmd
  3383 ;;		_Lcd_Init
  3384 ;;		_Lcd_Write_Char
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text23
  3389  0013E2                     __ptext23:
  3390                           	callstack 0
  3391  0013E2                     _Lcd_Port:
  3392                           	callstack 27
  3393                           
  3394                           ;incstack = 0
  3395                           ;Lcd_Port@a stored from wreg
  3396  0013E2  6E01               	movwf	Lcd_Port@a^0,c
  3397  0013E4                     
  3398                           ;Dispensador.c: 265:  if(a & 1)
  3399  0013E4  A001               	btfss	Lcd_Port@a^0,0,c
  3400  0013E6  EFF7  F009         	goto	u971
  3401  0013EA  EFF9  F009         	goto	u970
  3402  0013EE                     u971:
  3403  0013EE  EFFC  F009         	goto	l75
  3404  0013F2                     u970:
  3405  0013F2                     
  3406                           ;Dispensador.c: 266:   PORTBbits.RB5 = 1;
  3407  0013F2  8A81               	bsf	129,5,c	;volatile
  3408  0013F4  EFFD  F009         	goto	l1548
  3409  0013F8                     l75:
  3410                           
  3411                           ;Dispensador.c: 268:   PORTBbits.RB5 = 0;
  3412  0013F8  9A81               	bcf	129,5,c	;volatile
  3413  0013FA                     l1548:
  3414                           
  3415                           ;Dispensador.c: 270:  if(a & 2)
  3416  0013FA  A201               	btfss	Lcd_Port@a^0,1,c
  3417  0013FC  EF02  F00A         	goto	u981
  3418  001400  EF04  F00A         	goto	u980
  3419  001404                     u981:
  3420  001404  EF07  F00A         	goto	l77
  3421  001408                     u980:
  3422  001408                     
  3423                           ;Dispensador.c: 271:   PORTBbits.RB4 = 1;
  3424  001408  8881               	bsf	129,4,c	;volatile
  3425  00140A  EF08  F00A         	goto	l1552
  3426  00140E                     l77:
  3427                           
  3428                           ;Dispensador.c: 273:   PORTBbits.RB4 = 0;
  3429  00140E  9881               	bcf	129,4,c	;volatile
  3430  001410                     l1552:
  3431                           
  3432                           ;Dispensador.c: 275:  if(a & 4)
  3433  001410  A401               	btfss	Lcd_Port@a^0,2,c
  3434  001412  EF0D  F00A         	goto	u991
  3435  001416  EF0F  F00A         	goto	u990
  3436  00141A                     u991:
  3437  00141A  EF12  F00A         	goto	l79
  3438  00141E                     u990:
  3439  00141E                     
  3440                           ;Dispensador.c: 276:   PORTBbits.RB3 = 1;
  3441  00141E  8681               	bsf	129,3,c	;volatile
  3442  001420  EF13  F00A         	goto	l1556
  3443  001424                     l79:
  3444                           
  3445                           ;Dispensador.c: 278:   PORTBbits.RB3 = 0;
  3446  001424  9681               	bcf	129,3,c	;volatile
  3447  001426                     l1556:
  3448                           
  3449                           ;Dispensador.c: 280:  if(a & 8)
  3450  001426  A601               	btfss	Lcd_Port@a^0,3,c
  3451  001428  EF18  F00A         	goto	u1001
  3452  00142C  EF1A  F00A         	goto	u1000
  3453  001430                     u1001:
  3454  001430  EF1D  F00A         	goto	l81
  3455  001434                     u1000:
  3456  001434                     
  3457                           ;Dispensador.c: 281:   PORTBbits.RB2 = 1;
  3458  001434  8481               	bsf	129,2,c	;volatile
  3459  001436  EF1E  F00A         	goto	l83
  3460  00143A                     l81:
  3461                           
  3462                           ;Dispensador.c: 283:   PORTBbits.RB2 = 0;
  3463  00143A  9481               	bcf	129,2,c	;volatile
  3464  00143C                     l83:
  3465  00143C  0012               	return		;funcret
  3466  00143E                     __end_of_Lcd_Port:
  3467                           	callstack 0
  3468                           
  3469                           	psect	rparam
  3470  0000                     
  3471                           	psect	idloc
  3472                           
  3473                           ;Config register IDLOC0 @ 0x200000
  3474                           ;	unspecified, using default values
  3475  200000                     	org	2097152
  3476  200000  FF                 	db	255
  3477                           
  3478                           ;Config register IDLOC1 @ 0x200001
  3479                           ;	unspecified, using default values
  3480  200001                     	org	2097153
  3481  200001  FF                 	db	255
  3482                           
  3483                           ;Config register IDLOC2 @ 0x200002
  3484                           ;	unspecified, using default values
  3485  200002                     	org	2097154
  3486  200002  FF                 	db	255
  3487                           
  3488                           ;Config register IDLOC3 @ 0x200003
  3489                           ;	unspecified, using default values
  3490  200003                     	org	2097155
  3491  200003  FF                 	db	255
  3492                           
  3493                           ;Config register IDLOC4 @ 0x200004
  3494                           ;	unspecified, using default values
  3495  200004                     	org	2097156
  3496  200004  FF                 	db	255
  3497                           
  3498                           ;Config register IDLOC5 @ 0x200005
  3499                           ;	unspecified, using default values
  3500  200005                     	org	2097157
  3501  200005  FF                 	db	255
  3502                           
  3503                           ;Config register IDLOC6 @ 0x200006
  3504                           ;	unspecified, using default values
  3505  200006                     	org	2097158
  3506  200006  FF                 	db	255
  3507                           
  3508                           ;Config register IDLOC7 @ 0x200007
  3509                           ;	unspecified, using default values
  3510  200007                     	org	2097159
  3511  200007  FF                 	db	255
  3512                           
  3513                           	psect	config
  3514                           
  3515                           ;Config register CONFIG1L @ 0x300000
  3516                           ;	PLL Prescaler Selection bits
  3517                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  3518                           ;	System Clock Postscaler Selection bits
  3519                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3520                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3521                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  3522  300000                     	org	3145728
  3523  300000  00                 	db	0
  3524                           
  3525                           ;Config register CONFIG1H @ 0x300001
  3526                           ;	Oscillator Selection bits
  3527                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
  3528                           ;	Fail-Safe Clock Monitor Enable bit
  3529                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3530                           ;	Internal/External Oscillator Switchover bit
  3531                           ;	IESO = ON, Oscillator Switchover mode enabled
  3532  300001                     	org	3145729
  3533  300001  88                 	db	136
  3534                           
  3535                           ;Config register CONFIG2L @ 0x300002
  3536                           ;	Power-up Timer Enable bit
  3537                           ;	PWRT = ON, PWRT enabled
  3538                           ;	Brown-out Reset Enable bits
  3539                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3540                           ;	Brown-out Reset Voltage bits
  3541                           ;	BORV = 3, Minimum setting 2.05V
  3542                           ;	USB Voltage Regulator Enable bit
  3543                           ;	VREGEN = OFF, USB voltage regulator disabled
  3544  300002                     	org	3145730
  3545  300002  18                 	db	24
  3546                           
  3547                           ;Config register CONFIG2H @ 0x300003
  3548                           ;	Watchdog Timer Enable bit
  3549                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3550                           ;	Watchdog Timer Postscale Select bits
  3551                           ;	WDTPS = 32768, 1:32768
  3552  300003                     	org	3145731
  3553  300003  1E                 	db	30
  3554                           
  3555                           ; Padding undefined space
  3556  300004                     	org	3145732
  3557  300004  FF                 	db	255
  3558                           
  3559                           ;Config register CONFIG3H @ 0x300005
  3560                           ;	CCP2 MUX bit
  3561                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  3562                           ;	PORTB A/D Enable bit
  3563                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3564                           ;	Low-Power Timer 1 Oscillator Enable bit
  3565                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3566                           ;	MCLR Pin Enable bit
  3567                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  3568  300005                     	org	3145733
  3569  300005  01                 	db	1
  3570                           
  3571                           ;Config register CONFIG4L @ 0x300006
  3572                           ;	Stack Full/Underflow Reset Enable bit
  3573                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3574                           ;	Single-Supply ICSP Enable bit
  3575                           ;	LVP = OFF, Single-Supply ICSP disabled
  3576                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3577                           ;	ICPRT = OFF, ICPORT disabled
  3578                           ;	Extended Instruction Set Enable bit
  3579                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3580                           ;	Background Debugger Enable bit
  3581                           ;	DEBUG = 0x1, unprogrammed default
  3582  300006                     	org	3145734
  3583  300006  81                 	db	129
  3584                           
  3585                           ; Padding undefined space
  3586  300007                     	org	3145735
  3587  300007  FF                 	db	255
  3588                           
  3589                           ;Config register CONFIG5L @ 0x300008
  3590                           ;	Code Protection bit
  3591                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  3592                           ;	Code Protection bit
  3593                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  3594                           ;	Code Protection bit
  3595                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  3596                           ;	Code Protection bit
  3597                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  3598  300008                     	org	3145736
  3599  300008  0F                 	db	15
  3600                           
  3601                           ;Config register CONFIG5H @ 0x300009
  3602                           ;	Boot Block Code Protection bit
  3603                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3604                           ;	Data EEPROM Code Protection bit
  3605                           ;	CPD = OFF, Data EEPROM is not code-protected
  3606  300009                     	org	3145737
  3607  300009  C0                 	db	192
  3608                           
  3609                           ;Config register CONFIG6L @ 0x30000A
  3610                           ;	Write Protection bit
  3611                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3612                           ;	Write Protection bit
  3613                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3614                           ;	Write Protection bit
  3615                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  3616                           ;	Write Protection bit
  3617                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  3618  30000A                     	org	3145738
  3619  30000A  0F                 	db	15
  3620                           
  3621                           ;Config register CONFIG6H @ 0x30000B
  3622                           ;	Configuration Register Write Protection bit
  3623                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3624                           ;	Boot Block Write Protection bit
  3625                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3626                           ;	Data EEPROM Write Protection bit
  3627                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3628  30000B                     	org	3145739
  3629  30000B  E0                 	db	224
  3630                           
  3631                           ;Config register CONFIG7L @ 0x30000C
  3632                           ;	Table Read Protection bit
  3633                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3634                           ;	Table Read Protection bit
  3635                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3636                           ;	Table Read Protection bit
  3637                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3638                           ;	Table Read Protection bit
  3639                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3640  30000C                     	org	3145740
  3641  30000C  0F                 	db	15
  3642                           
  3643                           ;Config register CONFIG7H @ 0x30000D
  3644                           ;	Boot Block Table Read Protection bit
  3645                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3646  30000D                     	org	3145741
  3647  30000D  40                 	db	64
  3648                           tosu	equ	0xFFF
  3649                           tosh	equ	0xFFE
  3650                           tosl	equ	0xFFD
  3651                           stkptr	equ	0xFFC
  3652                           pclatu	equ	0xFFB
  3653                           pclath	equ	0xFFA
  3654                           pcl	equ	0xFF9
  3655                           tblptru	equ	0xFF8
  3656                           tblptrh	equ	0xFF7
  3657                           tblptrl	equ	0xFF6
  3658                           tablat	equ	0xFF5
  3659                           prodh	equ	0xFF4
  3660                           prodl	equ	0xFF3
  3661                           indf0	equ	0xFEF
  3662                           postinc0	equ	0xFEE
  3663                           postdec0	equ	0xFED
  3664                           preinc0	equ	0xFEC
  3665                           plusw0	equ	0xFEB
  3666                           fsr0h	equ	0xFEA
  3667                           fsr0l	equ	0xFE9
  3668                           wreg	equ	0xFE8
  3669                           indf1	equ	0xFE7
  3670                           postinc1	equ	0xFE6
  3671                           postdec1	equ	0xFE5
  3672                           preinc1	equ	0xFE4
  3673                           plusw1	equ	0xFE3
  3674                           fsr1h	equ	0xFE2
  3675                           fsr1l	equ	0xFE1
  3676                           bsr	equ	0xFE0
  3677                           indf2	equ	0xFDF
  3678                           postinc2	equ	0xFDE
  3679                           postdec2	equ	0xFDD
  3680                           preinc2	equ	0xFDC
  3681                           plusw2	equ	0xFDB
  3682                           fsr2h	equ	0xFDA
  3683                           fsr2l	equ	0xFD9
  3684                           status	equ	0xFD8

Data Sizes:
    Strings     25
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     17      57
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 5
		 -> Estado_Sis@aux(BANK0[5]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 5
		 -> Estado_Sis@aux(BANK0[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S1072_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 5
		 -> Estado_Sis@aux(BANK0[5]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 5
		 -> Estado_Sis@aux(BANK0[5]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[11]), STR_3(CODE[5]), Estado_Sis@aux(BANK0[5]), STR_1(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_Estado_Sis
    _Leer_Pir->_Leer_S_Magnetic
    _Leer_S_Magnetic->_Alarma_ON
    _Leer_S_Magnetic->_Dips_Alcohol
    _Estado_Sis->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_Estado_Sis
    _Estado_Sis->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8467
                                             15 BANK0      2     2      0
                         _Estado_Sis
                           _Leer_Pir
 ---------------------------------------------------------------------------------
 (1) _Leer_Pir                                             4     2      2     363
                                              4 COMRAM     4     2      2
                    _Leer_S_Magnetic
 ---------------------------------------------------------------------------------
 (2) _Leer_S_Magnetic                                      2     0      2     242
                                              2 COMRAM     2     0      2
                          _Alarma_ON
                       _Dips_Alcohol
 ---------------------------------------------------------------------------------
 (3) _Dips_Alcohol                                         2     0      2     121
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _Alarma_ON                                            2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Estado_Sis                                           7     5      2    8058
                                             93 COMRAM     2     0      2
                                             10 BANK0      5     5      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             16    10      6    6456
                                             87 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2     572
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     178
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     684
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             1     1      0     198
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0     110
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Estado_Sis
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
           _fputc
             _putch
   _Leer_Pir
     _Leer_S_Magnetic
       _Alarma_ON
       _Dips_Alcohol

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     11      39       5       35.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      98      20        0.0%
DATA                 0      0      98       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Dec 14 22:41:58 2020

                       l50 11AE                         l60 159A                         l53 14D2  
                       l54 14D6                         l63 1614                         l55 14DE  
                       l72 12A8                         l64 160E                         l81 143A  
                       l65 1622                         l66 163C                         l58 158A  
                       l83 143C                         l75 13F8                         l77 140E  
                       l69 165C                         l86 167C                         l79 1424  
                       l95 137E                         l98 1318                        l101 15D2  
                      l107 122E                        l224 0E38                        l237 0F9C  
                      l820 112C                        l815 10AE                        l818 10F0  
                      l826 08BC                        l828 08C4                        l860 13E0  
                      l853 0CB0                        l846 0AFC                        l864 155A  
                      l890 1694                        l867 1562                        l859 13D8  
                      l788 148E                        l879 1066                        l887 1522  
                      l896 1608                        u600 0FEA                        u601 0FE6  
                      u610 1020                        u611 101C                        u700 0DF8  
                      u620 1522                        u701 0DF4                        u621 151E  
                      u710 0E4C                        u630 15FC                        u711 0E48  
                      u631 15F8                        u640 0CC4                        u720 0E7E  
                      u800 1100                        u641 0CC0                        u721 0E7A  
                      u801 10FC                        u650 0CF6                        u730 0EBC  
                      u810 153E                        u651 0CF2                        u731 0EB8  
                      u811 153A                        u740 0EE6                        u580 0FB0  
                      u900 0A32                        u820 084C                        u661 0D20  
                      u741 0EE2                        u581 0FAC                        u901 0A2E  
                      u821 0846                        u670 0D44                        u750 0F14  
                      u590 0FC2                        u910 0A4C                        u830 084E  
                      u671 0D40                        u751 0F10                        u591 0FBE  
                      u911 0A48                        u680 0D6E                        u760 0F5C  
                      u920 0A66                        u840 0864                        u681 0D6A  
                      u761 0F58                        u921 0A62                        u841 0860  
                      u690 0DAE                        u770 1078                        u930 0A76  
                      u850 0894                        u691 0DAA                        u771 1074  
                      u931 0A72                        u851 0890                        u780 109A  
                      u940 0A88                        u860 08B0                        u781 1096  
                      u941 0A84                        u861 08AC                        u790 10F0  
                      u950 0A98                        u870 08DE                        u791 10EC  
                      u951 0A94                        u871 08DA                        u960 0AB0  
                      u880 08EC                        u961 0AAC                        u881 08E8  
                      u970 13F2                        u890 0A14                        u971 13EE  
                      u891 0A10                        u980 1408                        u981 1404  
                      u990 141E                        u991 141A                        _abs 1524  
                      _pad 1068                        wreg 000FE8                       ?_abs 0013  
                     l1400 0D6E                       l1410 0DE2                       l1402 0D80  
                     l1404 0DAE                       l1412 0DE8                       l1420 0E3A  
                     l1500 08EC                       l1414 0DF8                       l1406 0DCE  
                     l1430 0E7E                       l1422 0E3E                       l1350 0FCC  
                     l1510 098A                       l1502 08F2                       l1416 0E18  
                     l1408 0DD0                       l1440 0EE6                       l1432 0E9E  
                     l1424 0E4C                       l1352 0FEA                       l1344 0F9E  
                     l1360 14EC                       l1520 0A32                       l1512 0990  
                     l1504 08FA                       l1450 0F5C                       l1442 0F14  
                     l1434 0EBC                       l1426 0E6C                       l1354 1020  
                     l1346 0FB0                       l1362 14FE                       l1370 15E4  
                     l1530 0A98                       l1522 0A4C                       l1514 0996  
                     l1506 0902                       l1602 160A                       l1620 1660  
                     l1700 133E                       l1380 0CC4                       l1452 0F7C  
                     l1444 0F34                       l1436 0EC4                       l1428 0E70  
                     l1348 0FC2                       l1364 1502                       l1372 15FC  
                     l1460 108C                       l1532 0A9E                       l1540 0AD4  
                     l1524 0A66                       l1508 0908                       l1516 09FA  
                     l1612 163E                       l1604 1626                       l1550 1408  
                     l1622 1662                       l1710 1378                       l1702 1344  
                     l1630 159E                       l1390 0D1A                       l1382 0CE4  
                     l1446 0F46                       l1438 0ED8                       l1358 14E0  
                     l1366 15D4                       l1470 10D2                       l1462 109A  
                     l1534 0AB0                       l1518 0A14                       l1526 0A76  
                     l1614 1642                       l1606 1632                       l1552 1410  
                     l1544 13E4                       l1624 1668                       l1704 134E  
                     l1640 15BE                       l1632 15AA                       l1712 11B2  
                     l1392 0D26                       l1384 0CE8                       l1376 0CB2  
                     l1448 0F4C                       l1480 153E                       l1368 15E0  
                     l1472 1100                       l1464 10A6                       l1456 1068  
                     l1536 0ABC                       l1528 0A88                       l1560 0AFE  
                     l1720 143E                       l1616 1658                       l1608 1634  
                     l1554 141E                       l1546 13F2                       l1626 166A  
                     l1706 1360                       l1642 15C0                       l1634 15AC  
                     l1714 11BE                       l1394 0D44                       l1386 0CF6  
                     l1378 0CB6                       l1474 1114                       l1466 10BA  
                     l1458 1078                       l1538 0AC4                       l1490 0894  
                     l1482 081C                       l1570 0B6A                       l1562 0B22  
                     l1650 1380                       l1722 1450                       l1618 165A  
                     l1556 1426                       l1548 13FA                       l1628 167A  
                     l1708 1372                       l1644 15C6                       l1636 15B4  
                     l1716 11EE                       l1396 0D4C                       l1388 0D16  
                     l1468 10CE                       l1492 0896                       l1484 083C  
                     l1580 0C32                       l1572 0B8E                       l1564 0B30  
                     l1652 1388                       l1724 1458                       l1740 1230  
                     l1660 1572                       l1732 1490                       l1558 1434  
                     l1670 12B0                       l1646 15C8                       l1638 15B6  
                     l1718 11F2                       l1398 0D60                       l1478 1524  
                     l1494 08B0                       l1486 0864                       l1590 0C6E  
                     l1582 0C40                       l1574 0BD6                       l1566 0B42  
                     l1654 1396                       l1726 1460                       l1750 1270  
                     l1742 1234                       l1662 158E                       l1734 149E  
                     l1680 12E8                       l1672 12BE                       l1648 15D0  
                     l1496 08CC                       l1488 0884                       l1584 0C54  
                     l1568 0B46                       l1656 13BC                       l1728 147C  
                     l1752 127C                       l1744 123E                       l1664 1592  
                     l1736 14A4                       l1760 112E                       l1690 1306  
                     l1682 12EE                       l1674 12C4                       l1498 08DE  
                     l1578 0C0E                       l1594 0C7A                       l1754 1286  
                     l1746 124A                       l1658 1564                       l1738 14BA  
                     l1770 1140                       l1762 1138                       l1692 130C  
                     l1684 12F4                       l1676 12D2                       l1668 12AA  
                     l1596 0C9E                       l1588 0C60                       l1756 1292  
                     l1748 1254                       l1780 117A                       l1772 1146  
                     l1764 113A                       l1694 1312                       l1686 12FA  
                     l1678 12D8                       l1758 129C                       l1782 1180  
                     l1774 1148                       l1766 113C                       l1688 1300  
                     l1696 131C                       l1784 1194                       l1776 114A  
                     l1768 113E                       l1698 132C                       l1786 11A0  
                     l1778 1178                       ?_pad 0011                       STR_1 080C  
                     STR_2 0817                       STR_3 0812                       STR_4 0801  
                     u1000 1434                       u1001 1430                       u1010 0B22  
                     u1011 0B1E                       u1100 11EA                       u1020 0B6A  
                     u1021 0B66                       u1110 121E                       u1030 0B8E  
                     u1031 0B8A                       u1120 122E                       u1040 0C32  
                     u1121 122A                       u1041 0C2E                       u1050 1622  
                     u1130 149E                       u1107 11E0                       u1051 161E  
                     u1131 149A                       u1060 13D8                       u1140 11AE  
                     u1117 1214                       u1061 13D4                       u1141 11AA  
                     u1070 1572                       u1207 12CA                       u1071 156E  
                     u1080 132C                       u1217 12DE                       u1081 1328  
                     u1090 1360                       u1227 1670                       u1091 135C  
                     u1157 14AE                       u1167 164C                       u1177 15B8  
                     u1187 15CA                       u1197 12B6                       abs@a 0013  
        ?_Lcd_Write_String 0005                       _dbuf 0068                       _main 112E  
                     _dtoa 081C                       _prec 0064                       _nout 0060  
                     pad@i 0018                       pad@p 0015                       fsr1h 000FE2  
                     fsr2h 000FDA                       indf1 000FE7                       indf2 000FDF  
                     fsr1l 000FE1                       pad@w 001A                       fsr2l 000FD9  
            Leer_Pir@count 0005                       start 0000         ??_Lcd_Write_String 0007  
          __end_of_Lcd_Cmd 167E               ___param_bank 000000                      ??_abs 0015  
                    ??_pad 0017            __end_of___aodiv 0E3A                      ?_main 0001  
                    ?_dtoa 001C            __end_of___aomod 0F9E               vfpfcnvrt@fmt 0042  
     __end_of_Dips_Alcohol 163E    __size_of_Lcd_Set_Cursor 0066                      _TRISB 000F93  
                    _flags 0066                      _fputc 0F9E                      _fputs 14E0  
                    pad@fp 0011                      _width 0062                      _putch 1694  
                    dtoa@d 001E                      dtoa@i 003E                      dtoa@n 0036  
                    dtoa@p 0030                      dtoa@s 0034                      dtoa@w 0032  
                    tablat 000FF5   __size_of_Leer_S_Magnetic 0038                      status 000FD8  
          __end_of_sprintf 1490           __end_of_Lcd_Init 131A           __end_of_Lcd_Port 143E  
     Leer_S_Magnetic@count 0003            __initialization 167E                 _Estado_Sis 1230  
             __end_of_main 11B2               __end_of_dtoa 0AFE           __end_of_Leer_Pir 14E0  
       __size_of_Alarma_ON 0020                     ??_main 0060                     ??_dtoa 0026  
            __activetblptr 000002                     ?_fputc 0001                     ?_fputs 000A  
                   ?_putch 0001                  ??_Lcd_Cmd 0002    __size_of_Lcd_Write_Char 0038  
             vfprintf@cfmt 0056                  ??___aodiv 0011                  ??___aomod 0011  
                   clear_0 1684                     pad@buf 0013                     dtoa@fp 001C  
                   _strlen 15D4                     fputc@c 0001                     fputs@c 000E  
                   fputs@i 000F                     fputs@s 000A               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                   putch@c 0001           __end_of_vfprintf 13E2                  ??_sprintf 005E  
          Lcd_Set_Cursor@a 0005            Lcd_Set_Cursor@b 0004            Lcd_Set_Cursor@y 0007  
          Lcd_Set_Cursor@z 0006          __end_of_Alarma_ON 165E                 __accesstop 0060  
  __end_of__initialization 168A              ___rparam_used 000001          ??_Leer_S_Magnetic 0005  
              ?_Estado_Sis 005E             __pcstackCOMRAM 0001              __end_of_fputc 1068  
            __end_of_fputs 1524      __size_of_Dips_Alcohol 0034              __end_of_putch 1696  
           _Lcd_Set_Cursor 131A                  ?_Lcd_Init 0001                  ?_Lcd_Port 0001  
                  ??_fputc 0005                    ??_fputs 000E                    ??_putch 0001  
                ?_Leer_Pir 0005                 __pbssBANK0 0060          Dips_Alcohol@count 0001  
             _Dips_Alcohol 160A  __size_of_Lcd_Write_String 007E     __end_of_Lcd_Set_Cursor 1380  
                  ?_strlen 0001         __size_of_vfpfcnvrt 01B4                 ??_Lcd_Init 0004  
               ??_Lcd_Port 0001        __size_of_Estado_Sis 007A                 ??_Leer_Pir 0007  
           _Lcd_Write_Char 159C                    _Lcd_Cmd 165E                    __Hparam 0000  
                  __Lparam 0000                    ___aodiv 0CB2                    ___aomod 0E3A  
                ?_vfprintf 0050               __psmallconst 0800              Estado_Sis@aux 0092  
                  __pcinit 167E                    __ramtop 0800            ?_Lcd_Set_Cursor 0004  
                  __ptext0 112E                    __ptext1 1490                    __ptext2 1564  
                  __ptext3 160A                    __ptext4 163E                    __ptext5 1230  
                  __ptext6 143E                    __ptext7 1380                    __ptext8 0AFE  
                  __ptext9 081C            __size_of_strlen 0036               __size_of_abs 0040  
             __size_of_pad 00C6                    _sprintf 143E     __end_of_Lcd_Write_Char 15D4  
     end_of_initialization 168A                    fputc@fp 0003              __Lmediumconst 0000  
                  fputs@fp 000C          __end_of_vfpfcnvrt 0CB2                    postdec2 000FDD  
                  postinc0 000FEE                    postinc1 000FE6                    postinc2 000FDE  
                Lcd_Port@a 0001                 ??_vfprintf 0056                    strlen@a 0003  
                  strlen@s 0001                  _PORTAbits 000F80                  _PORTBbits 000F81  
                _PORTDbits 000F83                  _PORTEbits 000F84                  _TRISAbits 000F92  
                _TRISDbits 000F95            _Leer_S_Magnetic 1564            ?_Lcd_Write_Char 0001  
        Lcd_Write_String@a 0005          Lcd_Write_String@i 0009                  _Alarma_ON 163E  
             ??_Estado_Sis 0060                vfpfcnvrt@ap 0044                vfpfcnvrt@fp 0040  
              vfpfcnvrt@ll 0048           _Lcd_Write_String 11B2             __end_of_strlen 160A  
      start_initialization 167E                __end_of_abs 1564                __end_of_pad 112E  
       __end_of_Estado_Sis 12AA          __size_of_Lcd_Init 0070          __size_of_Lcd_Port 005C  
        __size_of_Leer_Pir 0050                 ?_Alarma_ON 0001                vfprintf@fmt 0052  
          Lcd_Write_Char@a 0004            Lcd_Write_Char@y 0003                   ??_strlen 0003  
  __end_of_Leer_S_Magnetic 159C              __pcstackBANK0 0088           ___aodiv@dividend 0001  
                 ?_Lcd_Cmd 0001            Estado_Sis@count 005E                  _dtoa$1145 002E  
         ??_Lcd_Set_Cursor 0005                   ?___aodiv 0001                   ?___aomod 0001  
         ___aodiv@quotient 0013          __size_of_vfprintf 0062                __smallconst 0800  
                 ?_sprintf 0058             __size_of_fputc 00CA             __size_of_fputs 0044  
           __size_of_putch 0002                ??_Alarma_ON 0001                   Lcd_Cmd@a 0003  
                _vfpfcnvrt 0AFE                 _ADCON0bits 000FC2                 _ADCON1bits 000FC1  
               _ADCON2bits 000FC0           ?_Leer_S_Magnetic 0003                  main@count 0097  
         ??_Lcd_Write_Char 0002                   _Lcd_Init 12AA                   _Lcd_Port 13E2  
                 _Leer_Pir 1490   __end_of_Lcd_Write_String 1230           __size_of_Lcd_Cmd 0020  
                 __Hrparam 0000                 vfprintf@ap 0054                   __Lrparam 0000  
               vfprintf@fp 0050           __size_of___aodiv 0188           __size_of___aomod 0164  
               ?_vfpfcnvrt 0040            ___aodiv@divisor 0009            ___aodiv@counter 0011  
               sprintf@fmt 005A                   __ptext10 1068                   __ptext11 15D4  
                 __ptext20 131A                   __ptext12 14E0                   __ptext21 12AA  
                 __ptext13 0F9E                   __ptext22 165E                   __ptext14 1694  
                 __ptext23 13E2                   __ptext15 1524                   __ptext16 0E3A  
                 __ptext17 0CB2                   __ptext18 11B2                   __ptext19 159C  
         __size_of_sprintf 0052              __size_of_main 0084              __size_of_dtoa 02E2  
            ?_Dips_Alcohol 0001                   _vfprintf 1380           ___aomod@dividend 0001  
       Lcd_Write_Char@temp 0002                  sprintf@ap 008A             ??_Dips_Alcohol 0003  
               _OSCCONbits 000FD3            ___aomod@divisor 0009                ??_vfpfcnvrt 0046  
          ___aomod@counter 0011         Lcd_Set_Cursor@temp 0008                   sprintf@f 008C  
                 sprintf@s 0058               ___aodiv@sign 0012               ___aomod@sign 0012  
